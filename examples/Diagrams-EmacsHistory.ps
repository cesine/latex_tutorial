%!PS-Adobe-2.0
%%Creator: dvips 5.72 Copyright 1997 Radical Eye Software (www.radicaleye.com)
%%Title: Diagrams-EmacsHistory.dvi
%%CreationDate: Wed Apr  2 21:47:58 1997
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: Times-Bold Times-BoldItalic cmsy10 Times-Roman Courier
%%EndComments
%DVIPSCommandLine: dvips Diagrams-EmacsHistory.dvi -o
%+ Diagrams-EmacsHistory.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 1997.04.02:2147
%%BeginProcSet: tex.pro
%!
/TeXDict 250 dict def TeXDict begin /N{def}def /B{bind def}N /S{exch}N
/X{S N}B /TR{translate}N /isls false N /vsize 11 72 mul N /hsize 8.5 72
mul N /landplus90{false}def /@rigin{isls{[0 landplus90{1 -1}{-1 1}
ifelse 0 0 0]concat}if 72 Resolution div 72 VResolution div neg scale
isls{landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div
hsize mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul
TR[matrix currentmatrix{dup dup round sub abs 0.00001 lt{round}if}
forall round exch round exch]setmatrix}N /@landscape{/isls true N}B
/@manualfeed{statusdict /manualfeed true put}B /@copies{/#copies X}B
/FMat[1 0 0 -1 0 0]N /FBB[0 0 0 0]N /nn 0 N /IE 0 N /ctr 0 N /df-tail{
/nn 8 dict N nn begin /FontType 3 N /FontMatrix fntrx N /FontBBox FBB N
string /base X array /BitMaps X /BuildChar{CharBuilder}N /Encoding IE N
end dup{/foo setfont}2 array copy cvx N load 0 nn put /ctr 0 N[}B /df{
/sf 1 N /fntrx FMat N df-tail}B /dfs{div /sf X /fntrx[sf 0 0 sf neg 0 0]
N df-tail}B /E{pop nn dup definefont setfont}B /ch-width{ch-data dup
length 5 sub get}B /ch-height{ch-data dup length 4 sub get}B /ch-xoff{
128 ch-data dup length 3 sub get sub}B /ch-yoff{ch-data dup length 2 sub
get 127 sub}B /ch-dx{ch-data dup length 1 sub get}B /ch-image{ch-data
dup type /stringtype ne{ctr get /ctr ctr 1 add N}if}B /id 0 N /rw 0 N
/rc 0 N /gp 0 N /cp 0 N /G 0 N /sf 0 N /CharBuilder{save 3 1 roll S dup
/base get 2 index get S /BitMaps get S get /ch-data X pop /ctr 0 N ch-dx
0 ch-xoff ch-yoff ch-height sub ch-xoff ch-width add ch-yoff
setcachedevice ch-width ch-height true[1 0 0 -1 -.1 ch-xoff sub ch-yoff
.1 sub]{ch-image}imagemask restore}B /D{/cc X dup type /stringtype ne{]}
if nn /base get cc ctr put nn /BitMaps get S ctr S sf 1 ne{dup dup
length 1 sub dup 2 index S get sf div put}if put /ctr ctr 1 add N}B /I{
cc 1 add D}B /bop{userdict /bop-hook known{bop-hook}if /SI save N @rigin
0 0 moveto /V matrix currentmatrix dup 1 get dup mul exch 0 get dup mul
add .99 lt{/QV}{/RV}ifelse load def pop pop}N /eop{SI restore userdict
/eop-hook known{eop-hook}if showpage}N /@start{userdict /start-hook
known{start-hook}if pop /VResolution X /Resolution X 1000 div /DVImag X
/IE 256 array N 0 1 255{IE S 1 string dup 0 3 index put cvn put}for
65781.76 div /vsize X 65781.76 div /hsize X}N /p{show}N /RMat[1 0 0 -1 0
0]N /BDot 260 string N /rulex 0 N /ruley 0 N /v{/ruley X /rulex X V}B /V
{}B /RV statusdict begin /product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{dup length product length le{dup length product
exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}
ifelse end{{gsave TR -.1 .1 TR 1 1 scale rulex ruley false RMat{BDot}
imagemask grestore}}{{gsave TR -.1 .1 TR rulex ruley scale 1 1 false
RMat{BDot}imagemask grestore}}ifelse B /QV{gsave newpath transform round
exch round exch itransform moveto rulex 0 rlineto 0 ruley neg rlineto
rulex neg 0 rlineto fill grestore}B /a{moveto}B /delta 0 N /tail{dup
/delta X 0 rmoveto}B /M{S p delta add tail}B /b{S p tail}B /c{-4 M}B /d{
-3 M}B /e{-2 M}B /f{-1 M}B /g{0 M}B /h{1 M}B /i{2 M}B /j{3 M}B /k{4 M}B
/w{0 rmoveto}B /l{p -4 w}B /m{p -3 w}B /n{p -2 w}B /o{p -1 w}B /q{p 1 w}
B /r{p 2 w}B /s{p 3 w}B /t{p 4 w}B /x{0 S rmoveto}B /y{3 2 roll p a}B
/bos{/SS save N}B /eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Created 1994/6/23. Source file was pstricks.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
def
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt { 1 setlinecap [ 0 dx n div ]
dy n div 2 div setdash } { 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    (P) 0 get /BoldPentagon put
  /Metrics 13 dict def
  Metrics begin
    /Bullet 1000 def
    /Circle 1000 def
    /BoldCircle 1000 def
    /SolidTriangle 1344 def
    /Triangle 1344 def
    /BoldTriangle 1344 def
    /SolidSquare 886 def
    /Square 886 def
    /BoldSquare 886 def
    /SolidPentagon 1093.2 def
    /Pentagon 1093.2 def
    /BoldPentagon 1093.2 def
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle { -550 -550 550 550 } def
    /BoldCircle /Circle load def
    /Bullet /Circle load def
    /Triangle { -571.5 -330 571.5 660 } def
    /BoldTriangle /Triangle load def
    /SolidTriangle /Triangle load def
    /Square { -450 -450 450 450 } def
    /BoldSquare /Square load def
    /SolidSquare /Square load def
    /Pentagon { -546.6 -465 546.6 574.7 } def
    /BoldPentagon /Pentagon load def
    /SolidPentagon /Pentagon load def
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath { 0 0 500 0 360 arc closepath } def
    /Bullet { 500 500 Adjust CirclePath fill } def
    /Circle { 500 500 Adjust CirclePath .9 .9 scale CirclePath eofill } def
    /BoldCircle { 500 500 Adjust CirclePath .8 .8 scale CirclePath eofill } def
    /BoldCircle { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath {
      0  660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath
    } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath {
      -450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto
      closepath
    } def
    /SolidSquare { SquarePath fill } def
    /Square { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon { PentagonPath .78 .78 scale PentagonPath eofill } def
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Created 1994/6/7. Source file was pst-node.doc
% Version 0.93a, 93/03/12.
% For use with Rokicki's dvips.
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r r mul sub
abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add exch 2
copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360 mul
add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED }
def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a
add AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c
57.2957 r Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end

%%EndProcSet
%%BeginProcSet: ec.enc
%
%   This is the EC encoding.
%
%   These are the ligs and kerns in addition to those found in the
%   AFM file.  (The only ligs in the Times-Roman.afm file are the
%   fi and fl ligatures.)
%
% LIGKERN space l =: lslash ; space L =: Lslash ;
% LIGKERN question quoteleft =: questiondown ; exclam quoteleft =: exclamdown ;
% LIGKERN hyphen hyphen =: endash ; endash hyphen =: emdash ;
% LIGKERN quoteleft quoteleft =: quotedblleft ;
% LIGKERN quoteright quoteright =: quotedblright ;
%
%   We blow away kerns to and from spaces (TeX doesn't have a
%   space) and also remove any kerns from the numbers (although
%   the only kern pair that mentions a number in Times-Roman.afm
%   is one one.)
%
% LIGKERN space {} * ; * {} space ; 0 {} * ; * {} 0 ;
% LIGKERN 1 {} * ; * {} 1 ; 2 {} * ; * {} 2 ; 3 {} * ; * {} 3 ;
% LIGKERN 4 {} * ; * {} 4 ; 5 {} * ; * {} 5 ; 6 {} * ; * {} 6 ;
% LIGKERN 7 {} * ; * {} 7 ; 8 {} * ; * {} 8 ; 9 {} * ; * {} 9 ;
% LIGKERN comma comma =: quotedblbase ; less less =: guillemotleft ;
% LIGKERN greater greater =: guillemotright ;
%
%   0x18 should be a small zero which you can put after a percent sign
%   to make it look like perthousand, but since that character is not
%   available and perthousand is, we put perthousand into 0x18 and add
%   a ligature to achieve the same result.
% 
% LIGKERN percent perthousand =: perthousand ;
%
/ECEncoding [          % now 256 chars follow
% 0x00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla
  /ogonek /quotesinglbase /guilsinglleft /guilsinglright
% 0x10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft 
  /guillemotright /endash /emdash /compoundwordmark
  /perthousand /dotlessi /dotlessj /ff /fi /fl /ffi /ffl
% 0x20
  /visiblespace /exclam /quotedbl /numbersign
  /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
% 0x30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
% 0x40
  /at /A /B /C /D /E /F /G /H /I /J /K /L /M /N /O
% 0x50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
% 0x60
  /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o
% 0x70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
% 0x80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lquoteright /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
% 0x90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcedilla /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dbar /section
% 0xA0
  /abreve /aogonek /cacute /ccaron /dquoteright /ecaron /eogonek /gbreve
  /lacute /lquoteright /lslash /nacute /ncaron /eng /ohungarumlaut /racute
% 0xB0
  /rcaron /sacute /scaron /scedilla
  /tquoteright /tcedilla /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent
  /ij /exclamdown /questiondown /sterling
% 0xC0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis
  /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /Germandbls
% 0xE0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis
  /igrave /iacute /icircumflex /idieresis
% 0xF0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def


%%EndProcSet
%%BeginProcSet: texps.pro
%!
TeXDict begin /rf{findfont dup length 1 add dict begin{1 index /FID ne 2
index /UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]/Metrics
exch def dict begin Encoding{exch dup type /integertype ne{pop pop 1 sub
dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get div def}
ifelse}forall Metrics /Metrics currentdict end def[2 index currentdict
end definefont 3 -1 roll makefont /setfont cvx]cvx def}def /ObliqueSlant
{dup sin S cos div neg}B /SlantFont{4 index mul add}def /ExtendFont{3 -1
roll mul exch}def /ReEncodeFont{/Encoding exch def}def end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin /SDict 200 dict N SDict begin /@SpecialDefaults{/hs 612 N
/vs 792 N /ho 0 N /vo 0 N /hsc 1 N /vsc 1 N /ang 0 N /CLIP 0 N /rwiSeen
false N /rhiSeen false N /letter{}N /note{}N /a4{}N /legal{}N}B
/@scaleunit 100 N /@hscale{@scaleunit div /hsc X}B /@vscale{@scaleunit
div /vsc X}B /@hsize{/hs X /CLIP 1 N}B /@vsize{/vs X /CLIP 1 N}B /@clip{
/CLIP 2 N}B /@hoffset{/ho X}B /@voffset{/vo X}B /@angle{/ang X}B /@rwi{
10 div /rwi X /rwiSeen true N}B /@rhi{10 div /rhi X /rhiSeen true N}B
/@llx{/llx X}B /@lly{/lly X}B /@urx{/urx X}B /@ury{/ury X}B /magscale
true def end /@MacSetUp{userdict /md known{userdict /md get type
/dicttype eq{userdict begin md length 10 add md maxlength ge{/md md dup
length 20 add dict copy def}if end md begin /letter{}N /note{}N /legal{}
N /od{txpose 1 0 mtx defaultmatrix dtransform S atan/pa X newpath
clippath mark{transform{itransform moveto}}{transform{itransform lineto}
}{6 -2 roll transform 6 -2 roll transform 6 -2 roll transform{
itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll curveto}}{{
closepath}}pathforall newpath counttomark array astore /gc xdf pop ct 39
0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}if}N
/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1 -1
scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3 get
ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip yflip
not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub neg 0
TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{noflips{TR
pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop 90 rotate 1
-1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg
TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr 1 get neg
sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr 2 get ppr
0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4 -1 roll add
2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S TR}if}N /cp
{pop pop showpage pm restore}N end}if}if}N /normalscale{Resolution 72
div VResolution 72 div neg scale magscale{DVImag dup scale}if 0 setgray}
N /psfts{S 65781.76 div N}N /startTexFig{/psf$SavedState save N userdict
maxlength dict begin /magscale true def normalscale currentpoint TR
/psf$ury psfts /psf$urx psfts /psf$lly psfts /psf$llx psfts /psf$y psfts
/psf$x psfts currentpoint /psf$cy X /psf$cx X /psf$sx psf$x psf$urx
psf$llx sub div N /psf$sy psf$y psf$ury psf$lly sub div N psf$sx psf$sy
scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub TR
/showpage{}N /erasepage{}N /copypage{}N /p 3 def @MacSetUp}N /doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N /endTexFig{end psf$SavedState restore}N /@beginspecial{SDict
begin /SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count /ocount X /dcount countdictstack N}N /@setspecial
{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if /showpage{}N /erasepage{}N /copypage{}N newpath
}N /@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{
end}repeat grestore SpecialSave restore end}N /@defspecial{SDict begin}
N /@fedspecial{end}B /li{lineto}B /rl{rlineto}B /rc{rcurveto}B /np{
/SaveX currentpoint /SaveY X N 1 setlinecap newpath}N /st{stroke SaveX
SaveY moveto}N /fil{fill SaveX SaveY moveto}N /ellipse{/endangle X
/startangle X /yrad X /xrad X /savematrix matrix currentmatrix N TR xrad
yrad scale 0 0 1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin /setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse /TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def /TeXcolorgrey{setgray}def /TeXcolorgray{
setgray}def /TeXcolorhsb{sethsbcolor}def /currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse /DC{exch dup userdict exch
known{pop pop}{X}ifelse}B /GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC /Goldenrod{0 0.10 0.84 0 setcmykcolor}
DC /Dandelion{0 0.29 0.84 0 setcmykcolor}DC /Apricot{0 0.32 0.52 0
setcmykcolor}DC /Peach{0 0.50 0.70 0 setcmykcolor}DC /Melon{0 0.46 0.50
0 setcmykcolor}DC /YellowOrange{0 0.42 1 0 setcmykcolor}DC /Orange{0
0.61 0.87 0 setcmykcolor}DC /BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC /RedOrange{0 0.77 0.87 0
setcmykcolor}DC /Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC /Maroon{0
0.87 0.68 0.32 setcmykcolor}DC /BrickRed{0 0.89 0.94 0.28 setcmykcolor}
DC /Red{0 1 1 0 setcmykcolor}DC /OrangeRed{0 1 0.50 0 setcmykcolor}DC
/RubineRed{0 1 0.13 0 setcmykcolor}DC /WildStrawberry{0 0.96 0.39 0
setcmykcolor}DC /Salmon{0 0.53 0.38 0 setcmykcolor}DC /CarnationPink{0
0.63 0 0 setcmykcolor}DC /Magenta{0 1 0 0 setcmykcolor}DC /VioletRed{0
0.81 0 0 setcmykcolor}DC /Rhodamine{0 0.82 0 0 setcmykcolor}DC /Mulberry
{0.34 0.90 0 0.02 setcmykcolor}DC /RedViolet{0.07 0.90 0 0.34
setcmykcolor}DC /Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC /Lavender{0
0.48 0 0 setcmykcolor}DC /Thistle{0.12 0.59 0 0 setcmykcolor}DC /Orchid{
0.32 0.64 0 0 setcmykcolor}DC /DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}
DC /Purple{0.45 0.86 0 0 setcmykcolor}DC /Plum{0.50 1 0 0 setcmykcolor}
DC /Violet{0.79 0.88 0 0 setcmykcolor}DC /RoyalPurple{0.75 0.90 0 0
setcmykcolor}DC /BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC /Periwinkle
{0.57 0.55 0 0 setcmykcolor}DC /CadetBlue{0.62 0.57 0.23 0 setcmykcolor}
DC /CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC /MidnightBlue{0.98 0.13
0 0.43 setcmykcolor}DC /NavyBlue{0.94 0.54 0 0 setcmykcolor}DC
/RoyalBlue{1 0.50 0 0 setcmykcolor}DC /Blue{1 1 0 0 setcmykcolor}DC
/Cerulean{0.94 0.11 0 0 setcmykcolor}DC /Cyan{1 0 0 0 setcmykcolor}DC
/ProcessBlue{0.96 0 0 0 setcmykcolor}DC /SkyBlue{0.62 0 0.12 0
setcmykcolor}DC /Turquoise{0.85 0 0.20 0 setcmykcolor}DC /TealBlue{0.86
0 0.34 0.02 setcmykcolor}DC /Aquamarine{0.82 0 0.30 0 setcmykcolor}DC
/BlueGreen{0.85 0 0.33 0 setcmykcolor}DC /Emerald{1 0 0.50 0
setcmykcolor}DC /JungleGreen{0.99 0 0.52 0 setcmykcolor}DC /SeaGreen{
0.69 0 0.50 0 setcmykcolor}DC /Green{1 0 1 0 setcmykcolor}DC
/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC /PineGreen{0.92 0 0.59
0.25 setcmykcolor}DC /LimeGreen{0.50 0 1 0 setcmykcolor}DC /YellowGreen{
0.44 0 0.74 0 setcmykcolor}DC /SpringGreen{0.26 0 0.76 0 setcmykcolor}
DC /OliveGreen{0.64 0 0.95 0.40 setcmykcolor}DC /RawSienna{0 0.72 1 0.45
setcmykcolor}DC /Sepia{0 0.83 1 0.70 setcmykcolor}DC /Brown{0 0.81 1
0.60 setcmykcolor}DC /Tan{0.14 0.42 0.56 0 setcmykcolor}DC /Gray{0 0 0
0.50 setcmykcolor}DC /Black{0 0 0 1 setcmykcolor}DC /White{0 0 0 0
setcmykcolor}DC end

%%EndProcSet
%%BeginFont: cmsy10
%!PS-AdobeFont-1.1: CMSY10 1.0
%%CreationDate: 1991 Aug 15 07:20:57

% Copyright (C) 1988 Blue Sky Research. All rights reserved.

11 dict begin
/FontInfo 7 dict dup begin
/version (1.0) readonly def
/Notice (Computer Modern fonts were designed by Donald E. Knuth) readonly def
/FullName (cmsy10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.035 def
/isFixedPitch false def
end readonly def
/FontName /cmsy10 def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 33 /arrowright put
readonly def
/FontBBox{-29 -960 1116 775}readonly def
/UniqueID 5000820 def
currentdict end
currentfile eexec
9b9c1569015f2c1d2bf560f4c0d52257bac8ced9b09a275ab231194ecf829352
05826f4e975dcecec72b2cf3a18899ccde1fd935d09d813b096cc6b83cdf4f23
b9a60db41f9976ac333263c908dcefcdbd4c8402ed00a36e7487634d089fd45a
f4a38a56a4412c3b0baffaeb717bf0de9ffb7a8460bf475a6718b0c73c571145
d026957276530530a2fbefc6c8f67052788e6703bb5ee49533870bca1f113ad8
3750d597b842d8d96c423ba1273ddd32f3a54a912a443fcd44f7c3a6fe3956b0
aa1e784aaec6fce08dae0c76da9d0a3eba57b98a6233d9e9f0c3f00fcc6b2c6a
9ba23af389e6dfff4efec3de05d6276c6be417703ce508377f25960ef4ed83b4
9b01b873f3a639ce00f356229b6477a081933fef3bb80e2b9dffa7f75567b1fa
4d739b772f8d674e567534c6c5bbf1cf615372be20b18472f7aa58be8c216dbd
df81cc0a86b6d8318ca68fe22c8af13b54d7576fe4ca5a7af9005ea5cc4edb79
c0ab668e4fec4b7f5a9eb5f0e4c088cd818ecc4feb4b40ec8bd2981bf2336074
b64c4301c39221774c4482ad2518015bc80e2e96dabb4bdccdc7509458fb63a2
2984f3b6397d485fa908c8e28b78b425b655bd10c7b99b765518c684d5a8c3ef
92d5d3f7aed529ef9b865eeff3d83b38fa3c75fb4277d914c5386974188bdfe1
4a35c35fab020dd339ede0de3f29d49cb3b2192370d3ae4727dc47956a6a1bd0
e09f58cc3e11dc25133e650ab784471ccee054fa0561a1196070bc0c9e84d0d5
2dd971581a2b758f4c6cae715e2a8c727cbc462abfc5735dde86042b7d079292
c98ee7f7aa53b5f60e4ee0c57c1a93e5593dc6be4d186c6adac4048ba3834e68
5308e229ca60dad94b8e15d7e1c7c2a840ce7d85aa7e38d3fbb6d703702ad5f5
2098c6ad16e97e3775160e4a6dd7c987
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark

%%EndFont 
TeXDict begin 39158280 55380996 1000 600 600
(/home0/alg/girou/tex/PST/WWW-Examples/Diagrams/Diagrams-EmacsHistory.dvi)
@start /Fa 138[50 1[50 50 2[50 50 4[50 2[50 50 50 28[50
2[50 3[50 1[50 1[50 13[50 46[{ ECEncoding ReEncodeFont }15
83.022 /Courier rf /Fb 134[42 2[42 1[23 32 28 1[42 42
42 65 3[23 42 2[37 1[37 42 37 10[60 60 1[46 5[74 7[51
5[37 5[42 1[42 42 1[42 1[42 42 2[21 1[21 21[83 22[{
 ECEncoding ReEncodeFont }30 83.022 /Times-Roman rf /Fc
128[28 5[42 42 60 42 46 28 32 37 1[46 42 46 69 23 46
1[23 46 42 28 37 46 37 46 42 6[55 1[60 83 60 60 55 46
60 1[51 65 60 78 55 65 42 32 65 65 51 55 60 60 55 60
1[42 5[42 42 42 42 42 42 42 42 42 42 23 21 1[21 2[28
28 18[42 21[{ ECEncoding ReEncodeFont }65 83.022 /Times-Bold
rf /Fd 222[83 33[{}1 83.022 /cmsy10 rf /Fe 135[42 3[23
1[32 1[42 42 46 4[23 3[37 42 37 1[42 12[51 4[60 9[55
1[55 67[{ ECEncoding ReEncodeFont }15 83.022 /Times-BoldItalic
rf /Ff 138[66 40 47 53 1[66 60 66 100 33 66 1[33 66 60
40 53 66 53 66 60 8[86 120 1[86 80 3[73 93 1[113 80 2[47
1[93 1[80 86 86 9[60 60 6[60 49[{ ECEncoding ReEncodeFont }35
119.552 /Times-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: a4

%%EndSetup
%%Page: 1 1
1 0 bop Black Black 3996 6209 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 3996 6209 a 3996 6209
a
 currentpoint currentpoint translate 0.6843 0.5763 scale neg exch neg
exch translate
 3996 6209 a 8136 -1471 a
 tx@Dict begin tx@NodeDict begin {13.00322 52.84586 151.9851 75.99255
3.13597 } /N@TECO true /N@M-1-1-4 16 {InitRnode } NewNode end end
 8136 -1471 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 8588 -1466 a Ff(TECO)8167 -1211
y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 19.3
neg 146.06378 24.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 8296 -1311 a
Fe(T)-8 b(ape)19 b(Editor)i(and)f(COrrector)8263 -1211
y Fd(!)h Fe(T)-8 b(ext)21 b(Editor)f(and)g(COrrector)8557
-1112 y Fc(DEC)h(/)g(PDP)8136 -846 y
 tx@Dict begin tx@NodeDict begin {13.00322 88.84586 151.9851 75.99255
3.13597 } /N@Emacs true /N@M-1-2-4 16 {InitRnode } NewNode end end
 8136 -846 a 31 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 8588 -841 a Ff(Emacs)8167
-435 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 37.3
neg 146.06378 42.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 8570 -685
a Fc(Since)p 1 0 0 0 TeXcolorcmyk 21 w(1975)p Black 8675
-586 a(MIT)8420 -486 y(Richard)f(Stallmann)8540 -386
y(\(Guy)f(Steele\))p 1 0 0 TeXcolorrgb 8486 -287 a(Full)h(page)g(mode)p
Black 8336 -187 a(PDP)g(assembly)g(language)9516 79 y
 tx@Dict begin tx@NodeDict begin {13.00322 64.84586 151.9851 75.99255
3.13597 } /N@MulticsEmacs true /N@M-1-3-5 16 {InitRnode } NewNode end
end

9516 79 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
9761 84 a Ff(Multics)30 b(Emacs)9547 390 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 25.3
neg 146.06378 30.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 9950 240 a Fc(Since)p 1 0 0 0
TeXcolorcmyk 21 w(1978)p Black 9867 339 a(Honeywell)19
b(Bull)9787 439 y(Bernard)h(Gr)o(eenberg)p 1 0 0 TeXcolorrgb
9953 538 a(PL1)g(/)h(Lisp)p Black 9516 805 a
 tx@Dict begin tx@NodeDict begin {13.00322 52.84586 151.9851 75.99255
3.13597 } /N@GoslingEmacs true /N@M-1-4-5 16 {InitRnode } NewNode end
end
 9516 805
a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 9757 810
a Ff(Gosling)30 b(Emacs)9547 1066 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 19.3
neg 146.06378 24.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial 9880 965 a Fc(James)21 b(Gosling)p 1 0 0
TeXcolorrgb 10052 1065 a(Unix)p Black 1 0 0 TeXcolorrgb
9885 1164 a(C)p Black 21 w(/)g(Mock)f(Lisp)8136 1549
y
 tx@Dict begin tx@NodeDict begin {13.00322 76.84586 151.9851 75.99255
3.13597 } /N@EmacsEighteen true /N@M-1-5-4 16 {InitRnode } NewNode
end end
 8136 1549 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
8514 1554 a Ff(Emacs)28 b(18)8167 1909 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 31.3
neg 146.06378 36.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 8570 1709 a Fc(Since)p 1 0 0 0
TeXcolorcmyk 21 w(1985)p Black 8293 1809 a(Fr)o(ee)20
b(Softwar)o(e)e(Foundation)8420 1908 y(Richard)i(Stallmann)8529
2008 y(18.1)f Fd(!)i Fc(18.59)8489 2108 y(C)g(/)p 1 0 0
TeXcolorrgb 21 w(Emacs)g(Lisp)p Black 6756 2428 a
 tx@Dict begin tx@NodeDict begin {13.00322 100.84586 151.9851 75.99255
3.13597 } /N@Epoch true /N@M-1-6-3 16 {InitRnode } NewNode end end
 6756
2428 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 7215
2433 a Ff(Epoch)6787 2888 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 43.3
neg 146.06378 48.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial 1 0 0 0 TeXcolorcmyk 7191 2588 a Fc(1988\0251992)p
Black 7016 2688 a(University)e(of)h(Illinois)7151 2788
y(Alan)h(Carr)o(oll)7035 2887 y(\(Christopher)f(Love\))7212
2987 y(1.0)f Fd(!)i Fc(4.2)7292 3087 y(Unix)p 1 0 0 TeXcolorrgb
7061 3186 a(Under)g(X\177W)o(indow)p Black 9516 2428
a
 tx@Dict begin tx@NodeDict begin {13.00322 76.84586 151.9851 75.99255
3.13597 } /N@MULE true /N@M-1-6-5 16 {InitRnode } NewNode end end
 9516 2428 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
9958 2433 a Ff(MULE)9547 2788 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 31.3
neg 146.06378 36.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial 1 0 0 TeXcolorrgb 9884 2588 a Fc(MULtilangual)p
Black 9720 2688 a(Enhancement)g(to)f(Emacs)9635 2788
y(Electr)o(otechnical)e(Laboratory)10028 2887 y(T)-8
b(okyo)9869 2987 y(Kenichi)20 b(Handa)10895 2428 y
 tx@Dict begin tx@NodeDict begin {19.536 119.37865 151.9851 75.99255
3.13597 } /N@EmacsDP true /N@M-1-6-6 16 {InitRnode } NewNode end end
 10895
2428 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 14.536
neg 146.06378 19.536 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 11147
2379 a Ff(Public)32 b(domain)11092 2487 y(implementations)10927
2992 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 49.3
neg 146.06378 54.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 10931 2643
a Fc(8)21 b(bits)g(support)f(\(eur)o(op.)29 b(languages\))11229
2742 y(Hebr)o(ew)19 b(support)11292 2842 y(micr)o(o\177emacs)11407
2942 y(JOVE)11368 3041 y(KEmacs)11379 3141 y(Nemacs)11293
3240 y(Alpha)h(\(Mac\))11456 3340 y(etc.)12275 2428 y
 tx@Dict begin tx@NodeDict begin {19.536 83.37865 151.9851 75.99255
3.13597 } /N@EmacsCom true /N@M-1-6-7 16 {InitRnode } NewNode end end

12275 2428 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 14.536
neg 146.06378 19.536 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
12583 2379 a Ff(Commer)n(cial)12472 2487 y(implementations)12307
2843 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 31.3
neg 146.06378 36.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 12808 2643
a Fc(Brief)12680 2742 y(CCA)g(Emacs)12764 2842 y(Epsilon)12613
2942 y(Unipr)o(ess)h(Emacs)12836 3041 y(etc.)5376 3606
y
 tx@Dict begin tx@NodeDict begin {13.00322 88.84586 151.9851 75.99255
3.13597 } /N@lemacs true /N@M-1-7-2 16 {InitRnode } NewNode end end
 5376 3606 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1 0 0  setrgbcolor gsave
fill grestore stroke grestore gsave 1 0 0  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
5825 3611 a Ff(lemacs)5407 4017 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 37.3
neg 146.06378 42.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.98 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial 1 0 0 0 TeXcolorcmyk 5811 3767 a Fc(1992\0251994)p
Black 5816 3866 a(Lucid)g(Inc.)5718 3966 y(Jamie)f(Zawinski)5646
4066 y(\(Richard)g(Mlynarik\))5913 4165 y(Unix)5770 4265
y(19.1)f Fd(!)h Fc(19.10)6756 4295 y
 tx@Dict begin tx@NodeDict begin {13.00322 40.84586 151.9851 75.99255
3.13597 } /N@WinEmacslemacs true /N@M-1-8-3 16 {InitRnode } NewNode
end end
 6756 4295 a 31 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor gsave
fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 7100 4300 a Ff(W)n(inEmacs)6787
4506 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 146.06378 18.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 7004 4455
a Fc(Based)h(on)g(lemacs)f(19.6)7150 4555 y(W)o(indows)h(3.1)5376
4821 y
 tx@Dict begin tx@NodeDict begin {13.00322 88.84586 151.9851 75.99255
3.13597 } /N@XEmacs true /N@M-1-9-2 16 {InitRnode } NewNode end end
 5376 4821 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor gsave
fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
5785 4826 a Ff(XEmacs)5407 5231 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 37.3
neg 146.06378 42.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial 5810 4981 a Fc(Since)p 1 0 0 0 TeXcolorcmyk
21 w(1994)p Black 5675 5081 a(Sun)g(Micr)o(osystems)5636
5181 y(University)e(of)h(Illinois)5473 5280 y(Chuck)h(Thompson)g(/)g
(Ben)g(W)o(ing)5913 5380 y(Unix)5751 5480 y(19.1)-5 b(1)19
b Fd(!)p 0 1 0 TeXcolorrgb 21 w Fc(19.14)p Black 8136
4821 a
 tx@Dict begin tx@NodeDict begin {13.00322 88.84586 151.9851 75.99255
3.13597 } /N@EmacsNineteen true /N@M-1-9-4 16 {InitRnode } NewNode
end end
 8136 4821 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor gsave
fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
8514 4826 a Ff(Emacs)28 b(19)8167 5231 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 37.3
neg 146.06378 42.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 8570 4981 a Fc(Since)p 1 0 0 0
TeXcolorcmyk 21 w(1993)p Black 8293 5081 a(Fr)o(ee)20
b(Softwar)o(e)e(Foundation)8420 5181 y(Richard)i(Stallmann)8205
5280 y(Unix,)g(W)o(in)g(3.1/95/NT)-6 b(,)19 b(OS/2,)h(etc.)8362
5380 y(Under)h(X\177W)o(indow)-5 b(,)19 b(etc.)8529 5480
y(19.1)g Fd(!)p 0 1 0 TeXcolorrgb 21 w Fc(19.34)p Black
3996 5509 a
 tx@Dict begin tx@NodeDict begin {13.00322 64.84586 151.9851 75.99255
3.13597 } /N@InfoDock true /N@M-1-10-1 16 {InitRnode } NewNode end
end
 3996 5509 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor gsave
fill grestore stroke grestore gsave 0.88 1. 1.  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end


@endspecial 4379 5514 a Ff(InfoDock)4027 5820 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 25.3
neg 146.06378 30.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
gsave fill grestore stroke grestore gsave 0.88 1 0.88  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 4430 5670 a Fc(Since)p 1 0 0 0
TeXcolorcmyk 21 w(1994)p Black 4453 5770 a(Motor)o(ola)4407
5869 y(Bob)i(W)-5 b(einer)4533 5969 y(Unix)5376 6235
y
 tx@Dict begin tx@NodeDict begin {13.00322 52.84586 151.9851 75.99255
3.13597 } /N@XEmacsTwenty true /N@M-1-11-2 16 {InitRnode } NewNode
end end
 5376 6235 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.84 0.  setrgbcolor gsave
fill grestore stroke grestore gsave 1. 0.84 0.  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
5785 6240 a Ff(XEmacs)5407 6496 y @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 19.3
neg 146.06378 24.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.75 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.75 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial 1 0 0 0 TeXcolorcmyk 5884 6395 a Fc(1997)19
b(?)p Black 5913 6495 a(Unix)5904 6595 y(19.20)6756 6235
y
 tx@Dict begin tx@NodeDict begin {13.00322 52.84586 151.9851 75.99255
3.13597 } /N@WinEmacsXEmacs true /N@M-1-11-3 16 {InitRnode } NewNode
end end
 6756 6235 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 8.0032
neg 146.06378 13.00322 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.84 0.  setrgbcolor gsave
fill grestore stroke grestore gsave 1. 0.84 0.  setrgbcolor fill grestore
gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
7100 6240 a Ff(W)n(inEmacs)6787 6496 y @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 19.3
neg 146.06378 24.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1. 0.75 0.8  setrgbcolor
gsave fill grestore stroke grestore gsave 1. 0.75 0.8  setrgbcolor
fill grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial 1 0 0 0 TeXcolorcmyk 7264 6395
a Fc(1997)f(?)p Black 6956 6495 a(Based)j(on)f(XEmacs)h(19.13)7076
6595 y(W)o(indows)g(3.1)e(/)i(95)13558 6209 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 3. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@TECO
/N@Emacs InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 13558 6209
a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Emacs
/N@EmacsEighteen InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@EmacsEighteen
/N@EmacsNineteen InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 13558 6209 a
13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@Emacs
/N@MulticsEmacs InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 0. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 3. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@MulticsEmacs
/N@GoslingEmacs InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray
0 setlinecap stroke  grestore  grestore end
 13558 6209 a 13558
6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 3. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin -14.22636 14.22636 neg 0.0 0.0
0 0 /N@GoslingEmacs /N@EmacsEighteen InitNC { tx@Dict begin /Lineto
/lineto load def false pop end /AngleA -90. def /AngleB 90. def /ArmA
14.22636 def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle
 } if end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 14.22636 14.22636 neg 0.0 0.0 0
0 /N@GoslingEmacs /N@EmacsCom InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA -90. def /AngleB 90. def /ArmA 10.0
def /ArmB 113.81097 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  }
if end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 13558 6209 a 13558 6209
a
 tx@Dict begin tx@NodeDict begin /t 1.91 def LPut end PutBegin  end
 13558 6209 a 13558 6209 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 64.71 6.53499
2.17 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 13558 6209 a 13289 6227 a
Fb(Unipress)f(Emacs)13558 6209 y
 tx@Dict begin PutEnd  end
 13558 6209 a 13558 6209
a
 tx@Dict begin PutEnd  end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@EmacsEighteen
/N@MULE InitNC { tx@Dict begin /Lineto /lineto load def false pop end
/AngleA 0. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def /ArmTypeA
0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0  setgray 0
setlinecap stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@EmacsEighteen
/N@EmacsDP InitNC { tx@Dict begin /Lineto /lineto load def false pop
end /AngleA 0. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def /ArmTypeA
0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0  setgray 0
setlinecap stroke  grestore  grestore end

13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 -14.22636 neg 0.0 0.0 0 0 /N@EmacsEighteen
/N@EmacsCom InitNC { tx@Dict begin /Lineto /lineto load def false pop
end /AngleA 0. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def /ArmTypeA
0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0  setgray 0
setlinecap stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 3. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin -14.22636 0.0 neg 0.0 0.0 0 0 /N@EmacsEighteen
/N@Epoch InitNC { tx@Dict begin /Lineto /lineto load def false pop
end /AngleA -90. def /AngleB 90. def /ArmA 10.0 def /ArmB 10.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 13558
6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@EmacsEighteen
/N@lemacs InitNC { tx@Dict begin /Lineto /lineto load def false pop
end /AngleA -180. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 14.22636 neg 0.0 0.0 0 0 /N@Epoch
/N@lemacs InitNC { tx@Dict begin /Lineto /lineto load def false pop
end /AngleA -180. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 13558 6209
a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@lemacs
/N@WinEmacslemacs InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 0. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@WinEmacslemacs
/N@WinEmacsXEmacs InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 13558 6209 a
13558 6209 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 13558 6209 a 13558 6209 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 5.0 46.58997
0.135 NAngle 90 sub  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 13558 6209 a 13537
6072 a Fb(1)13537 6154 y(9)13537 6238 y(9)13537 6319
y(7)13540 6402 y(?)13558 6209 y
 tx@Dict begin PutEnd  end
 13558 6209 a 13558 6209
a
 tx@Dict begin PutEnd  end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@lemacs
/N@XEmacs InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray 0 setlinecap
stroke  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@XEmacs
/N@InfoDock InitNC { tx@Dict begin /Lineto /lineto load def false pop
end /AngleA -180. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 0 setlinecap stroke  grestore  grestore end

13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 -17.07181 neg 0.0 0.0 0 0 /N@XEmacs
/N@WinEmacsXEmacs InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA 0. def /AngleB 90. def /ArmA 10.0 def /ArmB 0.0 def
/ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW 0 
setgray 5.0 3.0 -2 0 add DashLine  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@XEmacs
/N@XEmacsTwenty InitNC { NCLine  } if end gsave 0.8 SLW 0  setgray
5.0 3.0 -2 0 add DashLine  grestore  grestore end
 13558
6209 a 13558 6209 a
 tx@Dict begin tx@NodeDict begin /t .5 def LPut end PutBegin  end
 13558 6209 a 13558 6209 a
 tx@Dict begin { 5.0 tx@Dict /NCLW known { NCLW add } if 5.0 36.58498
0.135 NAngle 90 add  Uput exch pop add a PtoC h1 add exch w1 add exch
} PutCoor PutBegin  end
 13558 6209
a 13537 6114 a Fb(1)13537 6195 y(9)13537 6279 y(9)13537
6360 y(7)13558 6209 y
 tx@Dict begin PutEnd  end
 13558 6209 a 13558 6209 a
 tx@Dict begin PutEnd  end
 13558
6209 a 13558 6209 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { BeginArrow false 0.4 1.4 3.0 5. Arrow  EndArrow  }
def /NCLW CLW def tx@NodeDict begin 0.0 14.22636 neg 0.0 0.0 0 0 /N@MULE
/N@XEmacsTwenty InitNC { tx@Dict begin /Lineto /lineto load def false
pop end /AngleA -90. def /AngleB 90. def /ArmA 10.0 def /ArmB 28.45274
def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave 0.8 SLW
0  setgray 5.0 3.0 -2 0 add DashLine  grestore  grestore end
 13558 6209 a 13558 6209 a
 tx@Dict begin tx@NodeDict begin /t 0.91 def tx@NodeDict /HPutPos known
{ HPutPos } { CP /Y ED /X ED /NAngle 0 def /NCLW 0 def } ifelse /Sin
NAngle sin def /Cos NAngle cos def /s 8.5359 NCLW add def /l 197.97
def /r 197.97 def /h 3.73402 def /d 5.30597 def /flag false def HPutAdjust
LPutCoor end PutBegin  end
 13558 6209
a 11914 6235 a Fb(Main)g(events)g(in)h(Emacs)f(history)f(\026)i
Fa(<Denis.Girou@idris.fr>)c Fb(\026)k(V1.1)e(\026)i(September)e(24,)g
(1996)13558 6209 y
 tx@Dict begin PutEnd  end
 13558 6209 a 3996 6209 a
 currentpoint currentpoint translate 1 0.6843 div 1 0.5763 div scale
neg exch neg exch translate
 3996 6209
a 10539 6209 a
 currentpoint grestore moveto
 10539 6209 a Black Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
