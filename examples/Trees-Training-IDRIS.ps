%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: Trees-Training-IDRIS.dvi
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips Trees-Training-IDRIS.dvi -o
%+ Trees-Training-IDRIS.ps
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2001.04.27:1813
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro
%!
% PostScript prologue for pstricks.tex.
% Version 97 patch 3, 98/06/01
% For distribution, see pstricks.tex.
%
/tx@Dict 200 dict def tx@Dict begin
/ADict 25 dict def
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Atan { /atan load stopped { pop pop 0 } if } def
/Div { dup 0 eq { pop } { div } ifelse } def
/NET { neg exch neg exch T } def
/Pyth { dup mul exch dup mul add sqrt } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def }
def
/PathLength { flattenpath /z 0 def { /y1 ED /x1 ED /y2 y1 def /x2 x1 def
} { /y ED /x ED PathLength@ } {} { /y y2 def /x x2 def PathLength@ }
/pathforall load stopped { pop pop pop pop } if z } def
/STP { .996264 dup scale } def
/STV { SDict begin normalscale end STP  } def
/DashLine { dup 0 gt { /a .5 def PathLength exch div } { pop /a 1 def
PathLength } ifelse /b ED /x ED /y ED /z y x add def b a .5 sub 2 mul y
mul sub z Div round z mul a .5 sub 2 mul y mul add b exch Div dup y mul
/y ED x mul /x ED x 0 gt y 0 gt and { [ y x ] 1 a sub y mul } { [ 1 0 ]
0 } ifelse setdash stroke } def
/DotLine { /b PathLength def /a ED /z ED /y CLW def /z y z add def a 0 gt
{ /b b a div def } { a 0 eq { /b b y sub def } { a -3 eq { /b b y add
def } if } ifelse } ifelse [ 0 b b z Div round Div dup 0 le { pop 1 } if
] a 0 gt { 0 } { y 2 div a -2 gt { neg } if } ifelse setdash 1
setlinecap stroke } def
/LineFill { gsave abs CLW add /a ED a 0 dtransform round exch round exch
2 copy idtransform exch Atan rotate idtransform pop /a ED .25 .25
% DG/SR modification begin - Dec. 12, 1997 - Patch 2
%itransform translate pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
itransform pathbbox /y2 ED a Div ceiling cvi /x2 ED /y1 ED a
% DG/SR modification end
Div cvi /x1 ED /y2 y2 y1 sub def clip newpath 2 setlinecap systemdict
/setstrokeadjust known { true setstrokeadjust } if x2 x1 sub 1 add { x1
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore }
% def
a mul y1 moveto 0 y2 rlineto stroke /x1 x1 1 add def } repeat grestore
pop pop } def
% DG/SR modification end
/BeginArrow { ADict begin /@mtrx CM def gsave 2 copy T 2 index sub neg
exch 3 index sub exch Atan rotate newpath } def
/EndArrow { @mtrx setmatrix CP grestore end } def
/Arrow { CLW mul add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1
scale } if w neg h moveto 0 0 L w h L w neg a neg rlineto gsave fill
grestore } def
/Tbar { CLW mul add /z ED z -2 div CLW 2 div moveto z 0 rlineto stroke 0
CLW moveto } def
/Bracket { CLW mul add dup CLW sub 2 div /x ED mul CLW add /y ED /z CLW 2
div def x neg y moveto x neg CLW 2 div L x CLW 2 div L x y L stroke 0
CLW moveto } def
/RoundBracket { CLW mul add dup 2 div /x ED mul /y ED /mtrx CM def 0 CLW
2 div T x y mul 0 ne { x y scale } if 1 1 moveto .85 .5 .35 0 0 0
curveto -.35 0 -.85 .5 -1 1 curveto mtrx setmatrix stroke 0 CLW moveto }
def
/SD { 0 360 arc fill } def
/EndDot { { /z DS def } { /z 0 def } ifelse /b ED 0 z DS SD b { 0 z DS
CLW sub SD } if 0 DS z add CLW 4 div sub moveto } def
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
/closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
load } if ] cvx newpath 3 1 roll T exec } def
/NArray { aload length 2 div dup dup cvi eq not { exch pop } if /n exch
cvi def } def
/NArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop } if
f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/Line { NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub
def n { Lineto } repeat CP 4 2 roll ArrowB L pop pop } if } def
/Arcto { /a [ 6 -2 roll ] cvx def a r /arcto load stopped { 5 } { 4 }
ifelse { pop } repeat a } def
/CheckClosed { dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
and { pop pop /n n 1 sub def } if } def
/Polygon { NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n { pop pop }
repeat } { n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED /x0 ED /y1
ED /x1 ED x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1
moveto /n n 2 sub def n { Lineto } repeat x1 y1 x0 y0 6 4 roll Lineto
Lineto pop pop closepath } ifelse } def
/Diamond { /mtrx CM def T rotate /h ED /w ED dup 0 eq { pop } { CLW mul
neg /d ED /a w h Atan def /h d a sin Div h add def /w d a cos Div w add
def } ifelse mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2
div /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
setmatrix } def
% DG modification begin - Jan. 15, 1997
%/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup 0 eq {
%pop } { CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
%div dup cos exch sin Div mul sub def } ifelse mark 0 d w neg d 0 h w d 0
%d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
%setmatrix } def
/Triangle { /mtrx CM def translate rotate /h ED 2 div /w ED dup
CLW mul /d ED /h h d w h Atan sin Div sub def /w w d h w Atan 2
div dup cos exch sin Div mul sub def mark 0 d w neg d 0 h w d 0
d /ArrowA { moveto } def /ArrowB { } def false Line closepath mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
setmatrix pop } def
% DG/SR modification end
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CCA { /y ED /x ED 2 copy y sub /dy1 ED x sub /dx1 ED /l1 dx1 dy1 Pyth
def } def
/CC { /l0 l1 def /x1 x dx sub def /y1 y dy sub def /dx0 dx1 def /dy0 dy1
def CCA /dx dx0 l1 c exp mul dx1 l0 c exp mul add def /dy dy0 l1 c exp
mul dy1 l0 c exp mul add def /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos
abs b exp a mul dx dy Pyth Div 2 div def /x2 x l0 dx mul m mul sub def
/y2 y l0 dy mul m mul sub def /dx l1 dx mul m mul neg def /dy l1 dy mul
m mul neg def } def
/IC { /c c 1 add def c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if }
ifelse /a a 2 mul 3 div 45 cos b exp div def CCA /dx 0 def /dy 0 def }
def
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
/OpenCurve { NArray n 3 lt { n { pop pop } repeat } { BOC /n n 3 sub def
n { NC } repeat EOC } ifelse } def
/AltCurve { { false NArray n 2 mul 2 roll [ n 2 mul 3 sub 1 roll ] aload
/Points ED n 2 mul -2 roll } { false NArray } ifelse n 4 lt { n { pop
pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse } def
/ClosedCurve { NArray n 3 lt { n { pop pop } repeat } { n 3 gt {
CheckClosed } if 6 copy n 2 mul 6 add 6 roll IC CC x y moveto n { NC }
repeat closepath pop pop } ifelse } def
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore }
def
/FontDot { DS 2 mul dup matrix scale matrix concatmatrix exch matrix
rotate matrix concatmatrix exch findfont exch makefont setfont } def
/Rect { x1 y1 y2 add 2 div moveto x1 y2 lineto x2 y2 lineto x2 y1 lineto
x1 y1 lineto closepath } def
/OvalFrame { x1 x2 eq y1 y2 eq or { pop pop x1 y1 moveto x2 y2 L } { y1
y2 sub abs x1 x2 sub abs 2 copy gt { exch pop } { pop } ifelse 2 div
exch { dup 3 1 roll mul exch } if 2 copy lt { pop } { exch pop } ifelse
/b ED x1 y1 y2 add 2 div moveto x1 y2 x2 y2 b arcto x2 y2 x2 y1 b arcto
x2 y1 x1 y1 b arcto x1 y1 x1 y2 b arcto 16 { pop } repeat closepath }
ifelse } def
/Frame { CLW mul /a ED 3 -1 roll 2 copy gt { exch } if a sub /y2 ED a add
/y1 ED 2 copy gt { exch } if a sub /x2 ED a add /x1 ED 1 index 0 eq {
pop pop Rect } { OvalFrame } ifelse } def
/BezierNArray { /f ED counttomark 2 div dup cvi /n ED n eq not { exch pop
} if n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat f { ]
aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse } def
/OpenBezier { BezierNArray n 1 eq { pop pop } { ArrowA n 4 sub 3 idiv { 6
2 roll 4 2 roll curveto } repeat 6 2 roll 4 2 roll ArrowB curveto }
ifelse } def
/ClosedBezier { BezierNArray n 1 eq { pop pop } { moveto n 1 sub 3 idiv {
6 2 roll 4 2 roll curveto } repeat closepath } ifelse } def
/BezierShowPoints { gsave Points aload length 2 div cvi /n ED moveto n 1
sub { lineto } repeat CLW 2 div SLW [ 4 4 ] 0 setdash stroke grestore }
def
/Parab { /y0 exch def /x0 exch def /y1 exch def /x1 exch def /dx x0 x1
sub 3 div def /dy y0 y1 sub 3 div def x0 dx sub y0 dy add x1 y1 ArrowA
x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB curveto /Points [ x1 y1 x0
y0 x0 2 mul x1 sub y1 ] def } def
/Grid { newpath /a 4 string def /b ED /c ED /n ED cvi dup 1 lt { pop 1 }
if /s ED s div dup 0 eq { pop 1 } if /dy ED s div dup 0 eq { pop 1 } if
/dx ED dy div round dy mul /y0 ED dx div round dx mul /x0 ED dy div
round cvi /y2 ED dx div round cvi /x2 ED dy div round cvi /y1 ED dx div
round cvi /x1 ED /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def /w x2 x1 sub
0 gt { 1 } { -1 } ifelse def b 0 gt { /z1 b 4 div CLW 2 div add def
/Helvetica findfont b scalefont setfont /b b .95 mul CLW 2 div add def }
if systemdict /setstrokeadjust known { true setstrokeadjust /t { } def }
{ /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
exch itransform } bind def } ifelse gsave n 0 gt { 1 setlinecap [ 0 dy n
div ] dy n div 2 div setdash } { 2 setlinecap } ifelse /i x1 def /f y1
dy mul n 0 gt { dy n div 2 div h mul sub } if def /g y2 dy mul n 0 gt {
dy n div 2 div h mul add } if def x2 x1 sub w mul 1 add dup 1000 gt {
pop 1000 } if { i dx mul dup y0 moveto b 0 gt { gsave c i a cvs dup
stringwidth pop /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse h 0 gt {b neg}
{z1} ifelse rmoveto show grestore } if dup t f moveto g t L stroke /i i
w add def } repeat grestore gsave n 0 gt
% DG/SR modification begin - Nov. 7, 1997 - Patch 1
%{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
{ 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
% DG/SR modification end
{ 2 setlinecap } ifelse /i y1 def /f x1 dx mul
n 0 gt { dx n div 2 div w mul sub } if def /g x2 dx mul n 0 gt { dx n
div 2 div w mul add } if def y2 y1 sub h mul 1 add dup 1000 gt { pop
1000 } if { newpath i dy mul dup x0 exch moveto b 0 gt { gsave c i a cvs
dup stringwidth pop /z2 ED w 0 gt {z1 z2 add neg} {z1} ifelse h 0 gt
{z1} {b neg} ifelse rmoveto show grestore } if dup f exch t moveto g
exch t L stroke /i i h add def } repeat grestore } def
/ArcArrow { /d ED /b ED /a ED gsave newpath 0 -1000 moveto clip newpath 0
1 0 0 b grestore c mul /e ED pop pop pop r a e d PtoC y add exch x add
exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
mul neg d } def
/Ellipse { /mtrx CM def T scale 0 0 1 5 3 roll arc mtrx setmatrix } def
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
/RotBegin { tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 }
def } if /TMatrix [ TMatrix CM ] cvx def /a ED a Rot /RAngle [ RAngle
dup a add ] cvx def } def
/RotEnd { /TMatrix [ TMatrix setmatrix ] cvx def /RAngle [ RAngle pop ]
cvx def } def
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
/Uput { /a ED add 2 div /h ED 2 div /w ED /s a sin def /c a cos def /b s
abs c abs 2 copy gt dup /q ED { pop } { exch pop } ifelse def /w1 c b
div w mul def /h1 s b div h mul def q { w1 abs w sub dup c mul abs } {
h1 abs h sub dup s mul abs } ifelse } def
/UUput { /z ED abs /y ED /x ED q { x s div c mul abs y gt } { x c div s
mul abs y gt } ifelse { x x mul y y mul sub z z mul add sqrt z add } { q
{ x s div } { x c div } ifelse abs } ifelse a PtoC h1 add exch w1 add
exch } def
/BeginOL { dup (all) eq exch TheOL eq or { IfVisible not { Visible
/IfVisible true def } if } { IfVisible { Invisible /IfVisible false def
} if } ifelse } def
/InitOL { /OLUnit [ 3000 3000 matrix defaultmatrix dtransform ] cvx def
/Visible { CP OLUnit idtransform T moveto } def /Invisible { CP OLUnit
neg exch neg exch idtransform T moveto } def /BOL { BeginOL } def
/IfVisible true def } def
end
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro
%!PS-Adobe-2.0
%%Title: Dot Font for PSTricks
%%Creator: Timothy Van Zandt <tvz@Princeton.EDU>
%%Creation Date: May 7, 1993
%% Version 97 patch 1, 99/12/16
%% Modified by Etienne Riga <etienne.riga@skynet.be> - Dec. 16, 1999
%% to add /Diamond, /SolidDiamond and /BoldDiamond
10 dict dup begin
  /FontType 3 def
  /FontMatrix [ .001 0 0 .001 0 0 ] def
  /FontBBox [ 0 0 0 0 ] def
  /Encoding 256 array def
  0 1 255 { Encoding exch /.notdef put } for
  Encoding
    dup (b) 0 get /Bullet put
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
% DG/SR modification end
  /Metrics 13 dict def
  Metrics begin
    /Bullet        1000   def
    /Circle        1000   def
    /BoldCircle    1000   def
    /SolidTriangle 1344   def
    /Triangle      1344   def
    /BoldTriangle  1344   def
    /SolidSquare    886   def
    /Square         886   def
    /BoldSquare     886   def
    /SolidPentagon 1093.2 def
    /Pentagon      1093.2 def
    /BoldPentagon  1093.2 def
%%%%%%%%%%%%
    /SolidDiamond  1008   def
    /Diamond       1008   def
    /BoldDiamond   1008   def
%%%%%%%%%%%%
    /.notdef 0 def
  end
  /BBoxes 13 dict def
  BBoxes begin
    /Circle        { -550 -550 550 550 } def
    /BoldCircle    /Circle load def
    /Bullet        /Circle load def
    /Triangle      { -571.5 -330 571.5 660 } def
    /BoldTriangle  /Triangle load def
    /SolidTriangle /Triangle load def
    /Square        { -450 -450 450 450 } def
    /BoldSquare    /Square load def
    /SolidSquare   /Square load def
    /Pentagon      { -546.6 -465 546.6 574.7 } def
    /BoldPentagon  /Pentagon load def
    /SolidPentagon /Pentagon load def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /Diamond       { -428.5 -742.5 428.5 742.5 } def
    /BoldDiamond   /Diamond load def
    /SolidDiamond  /Diamond load def
% DG/SR modification end
    /.notdef { 0 0 0 0 } def
  end
  /CharProcs 20 dict def
  CharProcs begin
    /Adjust {
      2 copy dtransform floor .5 add exch floor .5 add exch idtransform
      3 -1 roll div 3 1 roll exch div exch scale
    } def
    /CirclePath    { 0 0 500 0 360 arc closepath } def
    /Bullet        { 500 500 Adjust CirclePath fill } def
    /Circle        { 500 500 Adjust CirclePath .9 .9 scale CirclePath
                     eofill } def
    /BoldCircle    { 500 500 Adjust CirclePath .8 .8 scale CirclePath
                     eofill } def
    /BoldCircle    { CirclePath .8 .8 scale CirclePath eofill } def
    /TrianglePath  { 0  660 moveto -571.5 -330 lineto 571.5 -330 lineto
                     closepath } def
    /SolidTriangle { TrianglePath fill } def
    /Triangle      { TrianglePath .85 .85 scale TrianglePath eofill } def
    /BoldTriangle  { TrianglePath .7 .7 scale TrianglePath eofill } def
    /SquarePath    { -450 450 moveto 450 450 lineto 450 -450 lineto
                     -450 -450 lineto closepath } def
    /SolidSquare   { SquarePath fill } def
    /Square        { SquarePath .89 .89 scale SquarePath eofill } def
    /BoldSquare    { SquarePath .78 .78 scale SquarePath eofill } def
    /PentagonPath  {
      -337.8 -465   moveto
       337.8 -465   lineto
       546.6  177.6 lineto
         0    574.7 lineto
      -546.6  177.6 lineto
      closepath
    } def
    /SolidPentagon { PentagonPath fill } def
    /Pentagon      { PentagonPath .89 .89 scale PentagonPath eofill } def
    /BoldPentagon  { PentagonPath .78 .78 scale PentagonPath eofill } def
% DG/SR modification begin - Dec. 16, 1999 - From Etienne Riga
    /DiamondPath   { 0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto
                     428.5 0 lineto closepath } def
    /SolidDiamond  { DiamondPath fill } def
    /Diamond       { DiamondPath .85 .85 scale DiamondPath eofill } def
    /BoldDiamond   { DiamondPath .7 .7 scale DiamondPath eofill } def
% DG/SR modification end
    /.notdef { } def
  end
  /BuildGlyph {
    exch
    begin
      Metrics 1 index get exec 0
      BBoxes 3 index get exec
      setcachedevice
      CharProcs begin load exec end
    end
  } def
  /BuildChar {
    1 index /Encoding get exch get
    1 index /BuildGlyph get exec
  } bind def
end
/PSTricksDotFont exch definefont pop
%END pst-dots.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro
%!
% PostScript prologue for pst-node.tex.
% Version 97 patch 1, 97/05/09.
% For distribution, see pstricks.tex.
%
/tx@NodeDict 400 dict def tx@NodeDict begin
tx@Dict begin /T /translate load def end
/NewNode { gsave /next ED dict dup 3 1 roll def exch { dup 3 1 roll def }
if begin tx@Dict begin STV CP T exec end /NodeMtrx CM def next end
grestore } def
/InitPnode { /Y ED /X ED /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
/InitCnode { /r ED /Y ED /X ED /NodePos { NodeSep r add dup Cos mul exch
Sin mul } def } def
/GetRnodePos { Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def
} ifelse Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def }
ifelse dx Sin mul abs dy Cos mul abs gt { dy Cos mul Sin div dy } { dx
dup Sin mul Cos Div } ifelse } def
/InitRnode { /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub
/u ED /NodePos { GetRnodePos } def } def
/DiaNodePos { w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
Cos mul exch Sin mul } def
/TriNodePos { Sin s lt { d NodeSep sub dup Cos mul Sin Div exch } { w h
mul w Sin mul h Cos abs mul add Div NodeSep add dup Cos mul exch Sin mul
} ifelse } def
/InitTriNode { sub 2 div exch 2 div exch 2 copy T 2 copy 4 index index /d
ED pop pop pop pop -90 mul rotate /NodeMtrx CM def /X 0 def /Y 0 def d
sub abs neg /d ED d add /h ED 2 div h mul h d sub Div /w ED /s d w Atan
sin def /NodePos { TriNodePos } def } def
/OvalNodePos { /ww w NodeSep add def /hh h NodeSep add def Sin ww mul Cos
hh mul Atan dup cos ww mul exch sin hh mul } def
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
/XYPos { dup sin exch cos Do /Cos ED /Sin ED /Dist ED Cos 0 gt { Dist
Dist Sin mul Cos div } { Cos 0 lt { Dist neg Dist Sin mul Cos div neg }
{ 0 Dist Sin mul } ifelse } ifelse Do } def
/GetEdge { dup 0 eq { pop begin 1 0 NodeMtrx dtransform CM idtransform
exch atan sub dup sin /Sin ED cos /Cos ED /NodeSep ED NodePos NodeMtrx
dtransform CM idtransform end } { 1 eq {{exch}} {{}} ifelse /Do ED pop
XYPos } ifelse } def
/AddOffset { 1 index 0 eq { pop pop } { 2 copy 5 2 roll cos mul add 4 1
roll sin mul sub exch } ifelse } def
/GetEdgeA { NodeSepA AngleA NodeA NodeSepTypeA GetEdge OffsetA AngleA
AddOffset yA add /yA1 ED xA add /xA1 ED } def
/GetEdgeB { NodeSepB AngleB NodeB NodeSepTypeB GetEdge OffsetB AngleB
AddOffset yB add /yB1 ED xB add /xB1 ED } def
/GetArmA { ArmTypeA 0 eq { /xA2 ArmA AngleA cos mul xA1 add def /yA2 ArmA
AngleA sin mul yA1 add def } { ArmTypeA 1 eq {{exch}} {{}} ifelse /Do ED
ArmA AngleA XYPos OffsetA AngleA AddOffset yA add /yA2 ED xA add /xA2 ED
} ifelse } def
/GetArmB { ArmTypeB 0 eq { /xB2 ArmB AngleB cos mul xB1 add def /yB2 ArmB
AngleB sin mul yB1 add def } { ArmTypeB 1 eq {{exch}} {{}} ifelse /Do ED
ArmB AngleB XYPos OffsetB AngleB AddOffset yB add /yB2 ED xB add /xB2 ED
} ifelse } def
/InitNC { /b ED /a ED /NodeSepTypeB ED /NodeSepTypeA ED /NodeSepB ED
/NodeSepA ED /OffsetB ED /OffsetA ED tx@NodeDict a known tx@NodeDict b
known and dup { /NodeA a load def /NodeB b load def NodeA GetCenter /yA
ED /xA ED NodeB GetCenter /yB ED /xB ED } if } def
/LPutLine { 4 copy 3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 1 t sub
mul 3 1 roll 1 t sub mul 4 1 roll t mul add /Y ED t mul add /X ED } def
/LPutLines { mark LPutVar counttomark 2 div 1 sub /n ED t floor dup n gt
{ pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse cvi 2 mul { pop
} repeat LPutLine cleartomark } def
/BezierMidpoint { /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED
/t ED /cx x1 x0 sub 3 mul def /cy y1 y0 sub 3 mul def /bx x2 x1 sub 3
mul cx sub def /by y2 y1 sub 3 mul cy sub def /ax x3 x0 sub cx sub bx
sub def /ay y3 y0 sub cy sub by sub def ax t 3 exp mul bx t t mul mul
add cx t mul add x0 add ay t 3 exp mul by t t mul mul add cy t mul add
y0 add 3 ay t t mul mul mul 2 by t mul mul add cy add 3 ax t t mul mul
mul 2 bx t mul mul add cx add atan /NAngle ED /Y ED /X ED } def
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
/HPutLines { HPosBegin yB yA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { dup Y check { exit
} { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark HPosEnd 
} def
/VPosBegin { xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def } def
/NCCoor { /AngleA yB yA sub xB xA sub Atan def /AngleB AngleA 180 add def
GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def /LPutPos {
LPutVar LPutLine } def /HPutPos { LPutVar HPutLine } def /VPutPos {
LPutVar VPutLine } def LPutVar } def
/NCLine { NCCoor tx@Dict begin ArrowA CP 4 2 roll ArrowB lineto pop pop
end } def
/NCLines { false NArray n 0 eq { NCLine } { 2 copy yA sub exch xA sub
Atan /AngleA ED n 2 mul dup index exch index yB sub exch xB sub Atan
/AngleB ED GetEdgeA GetEdgeB /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1
yA1 ] cvx def mark LPutVar tx@Dict begin false Line end /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
ifelse } def
/NCCurve { GetEdgeA GetEdgeB xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
/NCAngles { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform pop xB2 yB2 mtrx transform exch pop mtrx
itransform /y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA2
yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end /LPutVar [ xB1
yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def /LPutPos { LPutLines } def
/HPutPos { HPutLines } def /VPutPos { VPutLines } def } def
/NCAngle { GetEdgeA GetEdgeB GetArmB /mtrx AngleA matrix rotate def xB2
yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
/y0 ED /x0 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2 x0 y0 xA1 yA1
tx@Dict begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCBar { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate def
xA2 yA2 mtrx itransform pop xB2 yB2 mtrx itransform pop sub dup 0 mtrx
transform 3 -1 roll 0 gt { /yB2 exch yB2 add def /xB2 exch xB2 add def }
{ /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse mark ArmB
0 ne { xB1 yB1 } if xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict
begin false Line end /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx
def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
/NCDiag { GetEdgeA GetEdgeB GetArmA GetArmB mark ArmB 0 ne { xB1 yB1 } if
xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false Line end
/LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCDiagg { GetEdgeA GetArmA yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
GetEdgeB mark xB1 yB1 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin
false Line end /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def /LPutPos {
LPutLines } def /HPutPos { HPutLines } def /VPutPos { VPutLines } def }
def
/NCLoop { GetEdgeA GetEdgeB GetArmA GetArmB /mtrx AngleA matrix rotate
def xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED /xB3 xB2 yB2
mtrx transform pop def xB3 yA3 mtrx itransform /yB3 ED /xB3 ED xA3 yA3
mtrx itransform /yA3 ED /xA3 ED mark ArmB 0 ne { xB1 yB1 } if xB2 yB2
xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if tx@Dict begin false
Line end /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ]
cvx def /LPutPos { LPutLines } def /HPutPos { HPutLines } def /VPutPos {
VPutLines } def } def
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
/NCCircle { NodeSepA 0 NodeA 0 GetEdge pop 2 div dup 2 exp r
r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
mul add dup 5 1 roll 90 sub PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
% DG/SR modification end
} def /HPutPos { LPutPos } def /VPutPos { LPutPos } def r AngleA 90 sub a add
AngleA 270 add a sub tx@Dict begin /angleB ED /angleA ED /r ED /c 57.2957 r
Div def /y ED /x ED } def
/NCBox { /d ED /h ED /AngleB yB yA sub xB xA sub Atan def /AngleA AngleB
180 add def GetEdgeA GetEdgeB /dx d AngleB sin mul def /dy d AngleB cos
mul neg def /hx h AngleB sin mul neg def /hy h AngleB cos mul def
/LPutVar [ xA1 hx add yA1 hy add xB1 hx add yB1 hy add xB1 dx add yB1 dy
add xA1 dx add yA1 dy add ] cvx def /LPutPos { LPutLines } def /HPutPos
{ xB yB xA yA LPutLine } def /VPutPos { HPutPos } def mark LPutVar
tx@Dict begin false Polygon end } def
/NCArcBox { /l ED neg /d ED /h ED /a ED /AngleA yB yA sub xB xA sub Atan
def /AngleB AngleA 180 add def /tA AngleA a sub 90 add def /tB tA a 2
mul add def /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
/x0 xA r tA cos mul add def /y0 yA r tA sin mul add def /c 57.2958 r div
def /AngleA AngleA a sub 180 add def /AngleB AngleB a add 180 add def
GetEdgeA GetEdgeB /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul
sub def /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def l 0
eq { x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn }
{ x0 y0 translate /tA AngleA l c mul add def /tB AngleB l c mul sub def
0 0 r h add tA tB arc r h add AngleB PtoC r d add AngleB PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r d add tB PtoC l arcto 4 { pop } repeat 0
0 r d add tB tA arcn r d add AngleA PtoC r h add AngleA PtoC 2 copy 6 2
roll l arcto 4 { pop } repeat r h add tA PtoC l arcto 4 { pop } repeat }
ifelse closepath /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def /LPutPos
{ LPutVar /d ED /h ED /AngleB ED /AngleA ED /r ED /y0 ED /x0 ED t 1 le {
r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC }
{ t 2 lt { /NAngle AngleB 180 add def r 2 t sub h mul t 1 sub d mul add
add AngleB PtoC } { t 3 lt { r d add AngleB 3 t sub mul AngleA 2 t sub
mul add dup 90 sub /NAngle ED PtoC } { /NAngle AngleA 180 add def r 4 t
sub d mul t 3 sub h mul add add AngleA PtoC } ifelse } ifelse } ifelse
y0 add /Y ED x0 add /X ED } def /HPutPos { LPutPos } def /VPutPos {
LPutPos } def } def
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
/LPutCoor { NAngle tx@Dict begin /NAngle ED end gsave CM STV CP Y sub neg
exch X sub neg exch moveto setmatrix CP grestore } def
/LPut { tx@NodeDict /LPutPos known { LPutPos } { CP /Y ED /X ED /NAngle 0
def } ifelse LPutCoor  } def
/HPutAdjust { Sin Cos mul 0 eq { 0 } { d Cos mul Sin div flag not { neg }
if h Cos mul Sin div flag { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { r add neg } { l add } ifelse X add /X ED }
def
/VPutAdjust { Sin Cos mul 0 eq { 0 } { l Sin mul Cos div flag { neg } if
r Sin mul Cos div flag not { neg } if 2 copy gt { pop } { exch pop }
ifelse } ifelse s add flag { d add } { h add neg } ifelse Y add /Y ED }
def
end
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (Trees-Training-IDRIS.dvi)
@start
%DVIPSBitmapFont: Fa cmr10 10 16
/Fa 16 118 df<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A3
1C3879B72A>49 D<121C127FEAFF80A5EA7F00121CC7FCB2121C127FEAFF80A5EA7F0012
1C092479A317>58 D<B812F8A30001903880001F6C90C71201EE00FC177C173C171CA217
0CA4170E1706A2ED0180A21700A41503A21507151F91B5FCA3EC001F15071503A21501A6
92C8FCAD4813C0B612C0A32F397DB836>70 D<EC03FF021F13E09138FE01FC903901F800
7ED907E0EB1F8049486D7ED93F80EB07F049C76C7E01FE6E7E48486E7E49157E0003167F
4848ED3F80A24848ED1FC0A2001F17E049150F003F17F0A3007F17F8491507A300FF17FC
AC007F17F86D150FA3003F17F0A26C6CED1FE0A36C6CED3FC0000717806D157F00031700
6C6C15FEA26C6C4A5A017F4A5A6D6C495A6D6C495AD907E0EB1F80D903F8017FC7FC9039
00FE01FC91381FFFE0020390C8FC363D7BBA41>79 D<EB1FE0EBFFFC3803E03F3907000F
80390F8007E0486C6C7E13E06E7EA26E7E6C5A6C5AC8FCA4147FEB07FFEB3FE0EBFE00EA
03F8EA0FF0EA1FC0123F485A90C7FC160C12FEA31401A26C13036CEB077C903980063E18
383FC01E3A0FE0781FF03A03FFF00FE03A007F8007C026277DA52A>97
D<EB03FC90381FFF8090387E03E03901F80070484813F83907E001FC380FC003A2EA1F80
123F90380001F848EB00F01500A2127E12FEAA127E127FA26C14067F001F140E6D130C00
0F141C6C6C13386C6C13706C6C13E039007C07C090381FFF00EB07F81F277DA525>99
D<ED0FC0EC03FFA3EC003F150FB0EB03F8EB1FFF90387E078F9038F801EF3903F0007F48
48133F4848131FA24848130F123F90C7FC5AA2127E12FEAA127E127FA27EA26C6C131FA2
6C6C133F6C6C137F6C6CEBEFF03A01F801CFFF39007C078F90381FFE0FD907F813C0283B
7DB92E>I<EB07F8EB1FFF90387C0FC03901F803E03903F001F0D807E013F8380FC00048
48137CA248C7127E153E5A153F127E12FEA3B7FCA248C8FCA5127EA2127FA26C14037F00
1F14076C6C13060007140E6D131CD801F013386C6C137090387E03E090381FFF80903803
FC0020277EA525>I<ED03F090390FF00FF890393FFC3C3C9039F81F707C3901F00FE039
03E007C03A07C003E010000FECF000A248486C7EA86C6C485AA200075C6C6C485A6D485A
6D48C7FC38073FFC38060FF0000EC9FCA4120FA213C06CB512C015F86C14FE6CECFF8048
15C03A0F80007FE048C7EA0FF0003E140348140116F8481400A56C1401007C15F06CEC03
E0003F1407D80F80EB0F80D807E0EB3F003901FC01FC39007FFFF0010790C7FC26387EA5
2A>103 D<EA0380EA0FE0487EA56C5AEA0380C8FCAAEA03F012FFA312071203B3AA487E
B512C0A312387EB717>105 D<3903F00FF000FFEB3FFCECF03F9039F1C01F803A0FF380
0FC03803F70013FE496D7EA25BA35BB3A3486C497EB500C1B51280A329257EA42E>110
D<EB03FE90380FFF8090383E03E09038F800F84848137C48487F48487F4848EB0F80001F
15C090C712074815E0A2007EEC03F0A400FE15F8A9007E15F0A2007F14076C15E0A26C6C
EB0FC0000F15806D131F6C6CEB3F006C6C137EC66C13F890387E03F090381FFFC0D903FE
C7FC25277EA52A>I<3807E01F00FFEB7FC09038E1E3E09038E387F0380FE707EA03E613
EE9038EC03E09038FC0080491300A45BB3A2487EB512F0A31C257EA421>114
D<EBFF03000313E7380F80FF381E003F487F487F00707F12F0A2807EA27EB490C7FCEA7F
E013FF6C13E06C13F86C7F00037FC67F01071380EB007F141F00C0EB0FC01407A26C1303
A37E15806C13077EEC0F00B4131E38F3C07C38E1FFF038C03F801A277DA521>I<1318A5
1338A31378A313F8120112031207001FB5FCB6FCA2D801F8C7FCB215C0A93800FC011580
EB7C03017E13006D5AEB0FFEEB01F81A347FB220>I<D803F0EB07E000FFEB01FFA3000F
EB001F00031407B3A4150FA3151F12016D133F0000EC77F86D9038E7FF8090383F03C790
381FFF87903A03FC07E00029267EA42E>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmr5 5 39
/Fb 39 119 df<12E07E7E127C7E120FEA0780EA03000908799C1C>18
D<EA03801207120FEA1F00123E12785A12600908759C1C>I<EAFFF8A30D037E8A14>45
D<127012F8A3127005057A8411>I<146014E0130114C0A213031480130714005B130EA2
131E131C133C133813781370A213F05B12015BA212035B120790C7FC5A120EA2121E121C
123C123812781270A212F05AA213297C9E1C>I<1360EA01E0120F12FF12F11201B3A338
7FFF80A2111C7B9B1C>49 D<EA03FCEA0FFF383C0FC0387003E0387801F0EAFC0014F8A2
14781278C712F814F0A2EB01E0EB03C0EB0780EB0F00131C5B13E03801C018EA0380EA06
00481338383FFFF05AB5FCA2151C7D9B1C>I<EA01FC380FFF80381E07C0383001E0007C
13F01300127EEA7C01003813E0EA0003EB07C0EB1F803803FE005B38000780EB03C0EB01
E0EB00F014F81230127812FCA214F0EA7801387003E0383C07C0380FFF00EA03FC151D7D
9B1C>I<001C13E0EA1FFF14C0140013FC0018C7FCA513FCEA1BFF381F07C0381C01E012
18EB00F0C7FC14F8A2127012F8A214F01301006013E0387003C0383C0F80380FFF00EA03
F8151D7D9B1C>53 D<14C0497EA2497EA2497E1306A2EB0C7CA2EB187E143EEB383FEB30
1FA2496C7EA201C07F90B5FC4880EB8003000380EB0001A200066D7EA2001F803AFFC007
FFC0A2221D7D9C29>65 D<903807F80290383FFF069038FC038E3903F000FED807C0133E
485A48C7121E003E140E123C007C1406A2127800F81400A61278007C1406A2123C003E14
0C7E6C6C13186C6C1338D803F013703900FC03C090383FFF80903807FC001F1E7C9C28>
67 D<B512FEECFFC03907C003F0EC007C818181ED078016C01503A216E0A716C0150716
80150F1600153E5DEC03F0B612C04AC7FC231C7E9B2A>I<B612F8A23807C0001538A215
1CA2150C140CA21500141C143CEBFFFCA2EBC03C141C140CA391C7FCA6B5FCA21E1C7E9B
24>70 D<3AFFFE07FFF0A23A07C0003E00AA90B512FEA29038C0003EAC3AFFFE07FFF0A2
241C7E9B29>72 D<EAFFFEA2EA07C0B3A6EAFFFEA20F1C7D9B15>I<D8FFC0EC7FF06D14
FF0007EDFE00D806F0EB01BEA20178EB033EA26D1306A26D130CA26D1318A29038078030
A3903803C060A2903801E0C0A2903800F180A2EC7B00A2143E120F3BFFF01C07FFF0A22C
1C7E9B31>77 D<EB07F8EB3FFF9038F807C03903E001F0390780007848C77E001E80003E
141F003C80007C15800078140700F815C0A8007CEC0F80A2003C1500003E5C6C143E6C6C
5B6C6C5B6C6C485A3900FC0FC0D93FFFC7FCEB07F8221E7C9C2B>79
D<B512FCECFF803907C007E0EC01F0EC00F81578157CA4157815F8EC01F0EC07E090B512
80ECFC0001C0C7FCAAEAFFFEA21E1C7E9B25>I<B512F814FF3907C007C0EC01F06E7E15
7CA55D4A5AEC07C090B5C7FC819038C00FC0EC03E06E7EA71630EC00F8D8FFFE1460ED7F
E0C8EA0F80241D7E9B28>82 D<007FB6FCA2397803E00F00708000608000E0158000C014
01A4000091C7FCB090B57EA2211C7D9B28>84 D<D8FFFEEBFFF0A2D807C0EB0F001506B2
00035C7F00015C6C7E0178137090383E01E090380FFF80D901FCC7FC241D7E9B29>I<D8
FFF8EB3FF0A2D80FC0EB0F800007EC06006D130E0003140C6D131C000114187F00005C7F
017C5BA26D5BA26D485AA21483010F90C7FC14C7EB07C614EEEB03EC14FC6D5AA26D5AA2
1460241D7E9B29>I<EA1FF8EA3FFEEA7C0FEB0780EB03C012381200EA01FFEA0FC3EA3E
03127812F014C6A21307387C0FEE383FFBFC380FC1F017127D911C>97
D<12FEA2121EA9EB1FC0EBFFF0381FC0F8EB003C001E131EA2140FA6141EA2001F133C38
1DC0F8381CFFE038181F80181D7D9C1F>I<48B4FC00071380381F07C0123C1238387803
8048C7FCA6127800381360003E13C0EA1F813807FF00EA01FC13127D9119>I<EA01FE38
07FF80381F03C0383C00E0123800781370B512F0A200F0C7FCA4127800381330001E1360
380F80E03807FF803800FE0014127E9119>101 D<143C3801F8FE3807FF8E380E070E38
1C038C003C13C0A4001C1380380E0700EA0FFEEA19F80018C7FC121C381FFF806C13F014
F84813FC3878007C0060131E00E0130EA30078133C003E13F8380FFFE000011300171C7E
921C>103 D<121C123EA3121CC7FCA612FEA2121EAEEAFFC0A20A1D7D9C11>105
D<137013F8A313701300A6EA07F8A2EA0078B2127012F813F013E0EA7FC0EA3F000D2581
9C12>I<12FEA2121EB3A7EAFFC0A20A1D7D9C11>108 D<3AFE1FC03F8090397FF0FFE03A
1EC0F981F03A1F803F0078EB003E001E133CAB3AFFC1FF83FFA228127D912F>I<38FE1F
C0EB7FE0381EC0F0381F0078A2121EAB38FFC3FFA218127D911F>I<13FE3807FFC0380F
01E0383C0078003813380078133C48131EA60078133C00381338003C1378380F01E03807
FFC03800FE0017127E911C>I<38FE1FC0EBFFF0381FC0F8EB003C001E131EA2140FA614
1E143E001F137CEBC0F8381EFFE0EB1F8090C7FCA6EAFFC0A2181A7D911F>I<EAFE3C13
7EEA1ECFEA1F8F13061300121EAAEAFFE0A210127D9116>114 D<EA0FE2EA3FFEEA701E
EAC00E1306A2EAF800EA7FE0EA3FF8EA07FCEA001EEAC007130312E012F0EAF80EEADFFC
EA87F010127D9117>I<1203A35AA25AA2123FEAFFFCA2EA0F00A81306A5EA078CEA03F8
EA01F00F1A7E9916>I<38FE03F8A2381E0078AB14F8A2380F03783807FE7FEA03F81812
7D911F>I<39FFC07F80A2390F003C0014186C6C5AA26C6C5AA26C6C5AA23800F180A201
7BC7FCA2133EA2131CA219127E911E>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmr8 8 32
/Fc 32 121 df<13E0EA01F01203A2EA07E0EA0FC0EA1F00121E5A5A12E012400C0C72AD
23>19 D<123C127EB4FCA21380A2127F123D1201A312031300A25A1206120E5A5A5A1260
09157AAD14>39 D<EC0380B3A4B812FCA3C7D80380C7FCB3A42E2F7CA737>43
D<123C127E12FFA4127E123C08087A8714>46 D<15C0140114031580A214071500A25C14
0EA2141E141CA2143C143814781470A214F05CA213015CA213035C130791C7FCA25B130E
A2131E131CA2133C1338A21378137013F05BA212015BA212035BA2120790C8FC5A120EA2
121E121CA2123C1238A212781270A212F05AA21A437CB123>I<EB3FC0EBFFF03803E07C
48487E48487E497E001EEB0780A2003E14C0A248EB03E0A500FC14F0B0007C14E0A3007E
1307003E14C0A36CEB0F806C14006D5A3807C03E3803F0FC3800FFF0EB3FC01C2D7DAB23
>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F1300A2000C13
1FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015C0140F15E0A2
EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB3F00380780FC
3801FFF038007FC01C2D7DAB23>51 D<000CEB0180380FC01F90B512005C5C14F014C0D8
0C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F801F01001380000E130F000CEB07C0C7
13E0A2140315F0A4127812FCA448EB07E012E0006014C00070130F6C14806CEB1F006C13
3E380780F83801FFE038007F801C2D7DAB23>53 D<EB3F80EBFFF03803E0783807C03E48
487E48487E003E14801407007E14C0127C00FC14E01403A315F0A5007C1307127EA2003E
130F7E6C131F3807803B3803E0F33800FFC390383F03E013001407A215C0A2140F001E14
80003F14005C143E143C003E5B001C5B380E03E03807FF80D801FEC7FC1C2D7DAB23>57
D<4A7E4A7EA34A7EA24A7EA3EC1BF81419A2EC30FCA2EC70FEEC607EA24A7EA349486C7E
A2010380EC000FA201066D7EA3496D7EA2011FB57EA29038180001496D7EA349147EA201
E0147F4980A20001ED1F801203000716C0D80FF0EC3FE0D8FFFC0103B5FCA2302F7EAE35
>65 D<DA1FF013C09138FFFE01903903F00F8390390F8001E3013FC71277017C143F4848
141F4848140F48481407A248481403121F491401123F90C8FC481500A300FE1600AB127F
17C0A27E7F001F15016D1580120F6C6C1403EE07006C6C14066C6C140ED8007C5C013F14
7890390F8001E0903903F00FC0902600FFFEC7FCEC1FF02A2F7CAD33>67
D<B712FEA23903F800010001EC003E828282A282A3178016011518A293C7FCA315381578
15F890B5FCA2EBF800157815381518A21760A392C712C0A4160117801603A21607160F16
3F0003913801FF00B8FCA22B2D7EAC30>69 D<B712FCA23903F800030001EC007C163E16
1E160EA21606A3160716031518A21600A31538157815F890B5FCA2EBF800157815381518
A592C7FCAB487EB512F8A2282D7EAC2E>I<DA1FF013C09138FFFE01903903F00F839039
0F8001E3013FC71277017C143F4848141F4848140F48481407A248481403121F49140112
3F90C8FC481500A300FE1600A992381FFFFEA2007F9138001FE0EE0FC0A27E7F121F7F12
0F6C7EA26C7E6C6C141FEA007C013F143FD90F8013F3903903F007C10100B51200DA1FF8
13002F2F7CAD37>I<90383F80303901FFF0703807C07C390F000EF0001E130748130348
13011400127000F01470A315307EA26C1400127E127FEA3FE013FE381FFFE06C13FC6C13
FF00011480D8003F13E013039038003FF0EC07F81401140015FC157C12C0153CA37EA215
787E6C14706C14F06CEB01E039F78003C039E3F00F0038E07FFE38C00FF01E2F7CAD27>
83 D<007FB712F8A29039000FC003007C150000701638A200601618A200E0161CA24816
0CA5C71500B3A94A7E011FB512E0A22E2D7EAC33>I<B539F003FFFCA2D803FCC7EA3FC0
6C48EC0F001606B3AB160E0000150C7F161C017C1418017E14386D5C6D146090390F8001
E0903907E00380902601F80FC7FC9038007FFCEC0FF02E2E7DAC35>I<13FF000713C038
0F01F0381C00F8003F137C80A2143F001E7FC7FCA4EB07FF137F3801FE1FEA07F0EA1FC0
EA3F80EA7F00127E00FE14065AA3143F7E007E137F007FEBEF8C391F83C7FC390FFF03F8
3901FC01E01F207D9E23>97 D<EB1FE0EB7FFC3801F01E3803E0073907C01F80EA0F80EA
1F005A003EEB0F00007E90C7FCA2127C12FCA9127EA215C07E6C130101801380380FC003
3907E007003801F03E38007FF8EB1FC01A207E9E1F>99 D<15F8141FA214011400ACEB0F
E0EB7FF83801F81E3803E0073807C003380F8001EA1F00481300123E127EA25AA9127C12
7EA2003E13017EEB8003000F13073903E00EFC3A01F03CFFC038007FF090391FC0F80022
2F7EAD27>I<EB1F80EBFFF03803E0783807C03E380F801E381F001FEC0F80123E007E13
0715C0127C12FCA3B6FCA200FCC8FCA5127EA2003E14C0123F6C1301390F80038001C013
003803E00F3801F03C38007FF8EB1FC01A207E9E1F>I<EA0780EA0FC0EA1FE0A4EA0FC0
EA0780C7FCA8EA07C012FFA2120F1207B3A5EA0FE0EAFFFCA20E2E7EAD14>105
D<EA07C012FFA2120F1207B3B3A3EA0FE0EAFFFEA20F2E7EAD14>108
D<2607C07FEB07F03BFFC3FFC03FFC903AC783F0783F3C0FCE01F8E01F803B07DC00F9C0
0F01F8D9FF8013C04990387F000749137EA249137CB2486C01FEEB0FE03CFFFE0FFFE0FF
FEA2371E7E9D3C>I<3807C0FE39FFC3FF809038C703E0390FDE01F0EA07F8496C7EA25B
A25BB2486C487E3AFFFE1FFFC0A2221E7E9D27>I<EB1FE0EB7FF83801F03E3803C00F39
07800780390F0003C04814E0003EEB01F0A248EB00F8A300FC14FCA9007C14F8A26CEB01
F0A26CEB03E0A2390F8007C03907C00F803901F03E0038007FF8EB1FE01E207E9E23>I<
3807C0FE39FFC7FF809038CF03E0390FDC01F03907F800FC49137E49133E49133FED1F80
A3ED0FC0A8151F1680A2ED3F00A26D137E6D137C5D9038FC01F09038CE07E09038C7FF80
D9C1FCC7FC01C0C8FCA9487EEAFFFEA2222B7E9D27>I<380781F838FF87FEEB8E3FEA0F
9CEA07B813B0EBF01EEBE000A45BB0487EB5FCA2181E7E9D1C>114
D<3801FE183807FFB8381E01F8EA3C00481378481338A21418A27E7EB41300EA7FF06CB4
FC6C13C06C13F0000113F838001FFC130138C0007E143EA26C131EA27EA26C133CA26C13
7838FF01F038E3FFC000C0130017207E9E1C>I<1360A413E0A312011203A21207121FB5
12F0A23803E000AF1418A714383801F03014703800F860EB3FE0EB0F80152A7FA81B>I<
D807C013F800FF131FA2000F130100071300B21401A314033803E007EC0EFC3A01F81CFF
C038007FF890391FE0F800221F7E9D27>I<3AFFFC07FF80A23A0FF003FC000003EB01F0
000114C06D485A000091C7FCEB7C06EB3E0E6D5A14B8EB0FB0EB07E013036D7E497E1307
EB067C497EEB1C1F01387FEB700F496C7E6E7ED803C07F00076D7E391FE003FC3AFFF007
FFC0A2221D7F9C25>120 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmr9 9 24
/Fd 24 118 df<DA03FE130C91393FFF801C91B512E0903A03FE01F83C903A0FF0003C7C
D91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C485A173C485A17
1C123F5B007F160CA390C9FC481600AB7E6D150CA3123F7F001F161C17186C7E17386C6C
15306C6C15706D15E012016C6CEC01C0D97F80EB0380D91FC0EB0F00D90FF0131ED903FE
13FC0100B512F0023F13C0DA03FEC7FC2E377CB437>67 D<B77E16F016FE3A01FE0001FF
00009138003FC0EE0FE0707E707E707E707E177E177FEF3F80A2EF1FC0A3EF0FE0A418F0
AA18E0A3171F18C0A21880173F18005F17FE5F4C5AEE07F04C5AEE3FC000014AB45AB748
C7FC16F8168034337EB23B>I<DA03FE130C91393FFF801C91B512E0903A03FE01F83C90
3A0FF0003C7CD91FC0EB0EFCD97F80130701FEC7120348481401000315005B4848157C48
5A173C485A171C123F5B007F160CA390C9FC4893C7FCAA0303B512E07E7F92390003FE00
705A123F7F121FA26C7E7F12076C7E7F6C6C14036C7E6D6C1307D91FC0EB0E7CD90FF0EB
1C3CD903FEEBF81C0100B5EAF00C023F01C0C7FCDA03FEC8FC33377CB43C>71
D<B512FEA3000113006C5AB3B3A7487EB512FEA317337EB21C>73
D<B512FEA3D803FEC9FC6C5AB3A9EE0180A416031700A45EA25E5E5E5E16FE00031407B7
FCA329337DB230>76 D<B612FCEDFF8016F03A01FE0007FC0000EC01FEED007F707E707E
83160F83A65FA24C5AA24C5A047EC7FC4B5AED0FF090B612C093C8FC9039FE001FC0ED07
F06F7E6F7E150082167E167FA583A5180C17C0A2043F131C486C1618B500FEEB1FE0040F
1338933807F070C93801FFE09338003F8036357EB239>82 D<90381FE00390387FFC0748
B5FC3907F01FCF390F8003FF48C7FC003E80814880A200788000F880A46C80A27E92C7FC
127F13C0EA3FF013FF6C13F06C13FF6C14C06C14F0C680013F7F01037F9038003FFF1403
02001380157F153FED1FC0150F12C0A21507A37EA26CEC0F80A26C15006C5C6C143E6C14
7E01C05B39F1FC03F800E0B512E0011F138026C003FEC7FC22377CB42B>I<B500FE9038
1FFFF8A3000190C813006C48153C1718B3AF1738017F1530A217706D6C1460011F15E06E
495A010F14036D6C495A6D6C49C7FCD901FC131E6DB413FC91383FFFF0020F13C0020190
C8FC35357EB23A>85 D<EB7F803803FFF0380F80FC381C003E003F133F6D6C7E6E7EA26E
7EEA1F00C7FCA4EB01FF131FEBFF873803FC07EA0FF0EA1FC0EA3F80127F13004815C05A
A3140FA26C131F6C133B3A3F8071F180391FC1E1FF2607FFC013003900FE003C22237DA1
26>97 D<EB07F8EB3FFF9038FC07C03901F000E03903E003F03807C007120FEA1F80123F
90380003E04890C7FCA2127E12FEAA127FA26C14187F001F14386D1330000F14706C6C13
E03903F001C03900FC0F8090383FFE00EB07F01D237EA122>99 D<EB0FE0EB7FFCEBF83F
3903F00F80D807E013C0390FC007E0381F800315F0EA3F0014014814F8127EA212FEA2B6
FCA248C8FCA5127E127FA26C1418A26C6C1338000F14306D13706C6C13E03901F003C039
00FC0F00EB3FFEEB07F01D237EA122>101 D<151F90391FC07F809039FFF8E3C03901F0
7FC73907E03F033A0FC01F83809039800F8000001F80EB00074880A66C5CEB800F000F5C
EBC01F6C6C48C7FCEBF07C380EFFF8380C1FC0001CC9FCA3121EA2121F380FFFFEECFFC0
6C14F06C14FC4880381F0001003EEB007F4880ED1F8048140FA56C141F007C15006C143E
6C5C390FC001F83903F007E0C6B51280D91FFCC7FC22337EA126>103
D<EA03F012FFA312071203AEEC1FC0EC7FF09038F1E0FC9038F3807C9038F7007E13FE49
7FA25BA25BB3486CEB7F80B538C7FFFCA326347EB32B>I<EA0780EA0FC0EA1FE0A4EA0F
C0EA0780C7FCAAEA07E012FFA3120F1207B3A6EA0FF0B5FCA310337EB215>I<EA07E012
FFA3120F1207B3B3A7EA0FF0B5FCA310347EB315>108 D<2703F01FE013FF00FF90267F
F80313C0903BF1E07C0F03E0903BF3803E1C01F02807F7003F387FD803FE1470496D486C
7EA2495CA2495CB3486C496C487EB53BC7FFFE3FFFF0A33C217EA041>I<3903F01FC000
FFEB7FF09038F1E0FC9038F3807C3907F7007EEA03FE497FA25BA25BB3486CEB7F80B538
C7FFFCA326217EA02B>I<EB07F0EB3FFE9038FC1F803901F007C03903C001E000078048
486C7E48C7127CA248147E003E143E007E143FA300FE1580A8007E1500A36C147EA26C14
7C6D13FC6C6C485A00075C3903F007E03900FC1F80D93FFEC7FCEB07F021237EA126>I<
3903F03F8000FFEBFFE09038F3C0F89038F7007ED807FE7F6C48EB1F804914C049130F16
E0ED07F0A3ED03F8A9150716F0A216E0150F16C06D131F6DEB3F80160001FF13FC9038F3
81F89038F1FFE0D9F07FC7FC91C8FCAA487EB512C0A325307EA02B>I<903807F0039038
3FFC07EBFC0F3901F8038F3807E001000F14DF48486CB4FC497F123F90C77E5AA25A5AA9
127FA36C6C5B121F6D5B000F5B3907E003BF3903F0073F3800F81EEB3FF8EB0FE090C7FC
AAED7F8091380FFFFCA326307DA029>I<3803E07C38FFE1FF9038E38F809038E71FC0EA
07EEEA03ECA29038FC0F8049C7FCA35BB2487EB512E0A31A217FA01E>I<EBFF06000713
CE381F00FE003C133E48131E140E5A1406A27EA200FE90C7FC6C7EEA7FFC383FFFC014F0
000F7F6C7FC67FEB0FFF1300EC3F8000C0131F140F6C1307A37E15006C5B6C130E6C5B38
F7807838E1FFE038C07F8019237EA11E>I<1330A51370A313F0A21201A212031207381F
FFFEB5FCA23803F000AF1403A814073801F806A23800FC0EEB7E1CEB1FF8EB07E0182F7F
AD1E>I<D803F0133F00FFEB0FFFA30007EB007F000380B35DA35D12016D481380000090
3803BFFC90387E073FEB1FFED907F8130026227EA02B>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmr12 14.4 14
/Fe 14 124 df<14075C5C147F5C1307133F000FB5FCB6FC13F913C1EAF0011200B3B3B3
A7497F010F13E0B712FEA4274F75CE3B>49 D<ED3FE0913803FFFC020F13FF91393FE01F
8091397F0007C0D901FCEB01E04948EB00F0495A494813034948EB0FF84948131F49C7FC
13FEA2485A120349EC0FF00007ED03C093C7FC485AA2121F5BA2123FA3127F5BEC0FFF02
3F13C04A13F03AFFC1F003FC9039C3C000FED9C780137F91C7EA3F8001CE15C001DCEC1F
E0160F01D815F001F8EC07F85B17FCA24915FE1603A317FF5BA3127FA66C7EA317FE121F
A216076C6C15FCA2000716F86D140F000316F06DEC1FE012016C6CEC3FC06DEC7F806D6C
EBFF006D6C485A90390FF80FFC6DB512F0010114C06D6C90C7FCEC0FF830517BCE3B>54
D<121EA2121F13F090B812C0A4481780A218005FA2003CC9123C00385E0078167017F000
704B5A5F16034C5A94C7FC485D161E5EC9123816785E5E15014B5A5E15074BC8FCA2151E
153E153C157C157815F8A24A5AA21403A25D1407A2140FA25D141FA3143FA3147F5DA414
FFA65BAC6D90C9FC143C32537AD03B>I<EC1FF891B5FC010314C090390FF00FE090391F
C003F890397F8001FC01FEC77E0001157F4848EC3F805B0007ED1FC0484815E0001F150F
4915F0123F1607007F16F85BA217FC12FFA2160317FEA617FFA35E127FA37F003F5DA212
1F6D5C000F151B0007153B6D14336C6C1473000115E36C6C1301017FEB03C3903A3FC00F
83FE90390FFFFE03010313FC010013F091C7FC160717FCA317F8A2160F17F0A2161FD803
C015E0EA0FF0486CEC3FC01780167F170016FE150149495AD80FC0495A90C7485A6C6C49
5A01E0495A2703FC01FFC7FC6CB55A6C6C13F8011F13E0010390C8FC30517BCE3B>57
D<DC1FFC14034BB500C01307030F02F0130F037F14FC912801FFF800FF131F02070180EB
1FC04A48C73807E03FDA3FF8913801F07FDA7FE0EC00F8902601FF80ED3CFF4990C97E49
4882494882495A4948824948825C01FF834849177F91CBFC48193F485AA24848181FA212
1F49180FA2123FA2491807127FA31A005B12FFAE127F7FA31A07123F7FA2121FA26D180F
000F190EA26C7E1A1E6C6C181C6C193C806C6D1778137F6E17F06D6CEE01E06D7E6D6CEE
03C06D6CEE07806D6CEE0F006D6D151E9026007FE0157CDA3FF85DDA0FFEEC03F06E6C6C
EB0FE0020101F8EBFF806E6CB548C7FC030F14F8030114E09226001FFEC8FC48567AD355
>67 D<B812FEEFFFE018FC18FF26007FFCC7000F13C06D4802017F011F9238003FF8F00F
FC727EF001FF727F737E737E737E190F86737EA2737E737EA21B8085A21BC01A7F1BE0A4
F23FF0A51BF8AE1BF0A4F27FE0A41BC01AFF1B80A24F1300A24F5AA24F5AA24F5A4F5A4F
5A4F5A4F5A4E90C7FC4E5AF00FFCF03FF8013FEEFFE0496C020F5BBAC8FC18FC18E04DC9
FC4D527BD159>I<B7FCA439007FFE006D5A6D5AB3B3B3B0497E497EB7FCA420527BD12A>
73 D<B812C017FEEFFFC018F026007FFCC713FC6D48EC0FFF011F03017F9438007FE072
7E727E727E180785727EA28684A286A762A26097C7FCA24E5A614E5A4E5A4E5AF0FFC04D
90C8FCEF0FFEEFFFF891B712C04DC9FC839126F8000113C09338003FF0EF0FFC717EEF01
FF85717F727EA2727EA2727EA985A81B0785180FA21B0F0607140E496C82496C6F141EB7
6EEB801C72EBC03C96387FE0F896381FFFF0CC000713E09638007F8050547BD156>82
D<DA3FF0130349B55B010714C0011FECF00F903A7FE00FF81F49C712FED801FCEC3F3F48
48EC1FBF48486EB4FC48481403485A4980003F8190C97E5A83127E8312FEA283A37E837F
A27F007F93C7FC7F7FEA3FFC7F6C6C7E14F86CEBFF806C14F8EDFF806C15F06C15FE6C6C
806D15C0010F81010315F8D9007F80140F020080030F7F03001480161F040713C0160182
EF7FE0A2173FEF1FF0A200E0160FA31707A37EA318E07E170F7E18C06C161F6C17806D15
3F6D16006D157E6D15FED8FCFC4A5A017F4A5A26F83FC0EB0FF0D90FFEEB7FC0D8F003B6
5A48C64AC7FC023F13F848010113C034567AD341>I<EC0FFC91387FFF8049B512E09039
07F807F890391FE001FE90393F80007F017EC7EA1F80496E7E48486E7E00038248486E7E
A248486E7EA248486E7EA2003F82A24848ED7F80A400FF17C0AB007F1780A26D15FFA200
3F1700A2001F5E6D1401000F5E6D140300075E6C6C4A5A6C6C4A5AA2D8007FEC3F806D6C
49C7FC90391FE001FE903907F807F86DB55AD9007F1380DA0FFCC8FC32367CB43B>111
D<01FFEB1F80B5EB7FF0913801FFF8913803E1FC91380783FE0003EB0F07C6131EEB7F1C
1438143091387003FC91386000F0160014E05CA45CB3AA8048487EB612F0A427347DB32E
>114 D<D907FE13C090387FFF8148B512E33907F803FF390FC0007F4848133F48C7121F
003E140F007E1407127C00FC1403A315017EA27E7F6C6C90C7FC13F013FF6C13F86CEBFF
806C14E06C14F86C14FEC680013F1480010714C0D9003F13E014039138007FF0151F00E0
140FED07F8A26C1403A215017EA36C15F0A26C14036C15E015076DEB0FC06DEB1F80D8FD
F0EB3F0039F8FC01FE39F07FFFF8D8E01F13E0D8C00390C7FC25367CB42E>I<D97F80EC
7F80B591B5FCA400031503C61500017F157FB3AC17FFA35EA3013F5C6EEB077FA2011F02
0E7F6D6C011C13F06E0178EBFFC0903903FC01F06DB512E06D6C1380912607FC00EB8000
3A357CB341>117 D<BA12C0A33A0380A03B>123 D E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%PaperSize: A4

%%EndSetup
%%Page: 1 1
1 0 bop Black Black 3304 5413 a
 gsave currentpoint currentpoint translate 90 neg rotate neg exch neg
exch translate
 3304 5413 a Black 3405
2650 a @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  14.22636 false 12.18092
neg 289.97694 neg 665.84746 12.18092 .5 Frame  gsave 0.8 SLW 0  setgray
0 setlinecap stroke  grestore end
 
@endspecial 6249 2763
a
 tx@Dict begin tx@NodeDict begin {13.64 5.92133 157.83289 78.91644
13.64 } false /N@T-0 16 {InitRnode } NewNode end end
 6249 2763 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 151.91156 13.64 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fe(Cours)38 b(IDRIS)i(1996{1997)4696 3442 y
 tx@Dict begin tx@NodeDict begin {10.05 5.92133 120.82121 60.4106 10.05
} false /N@T-0-0 16 {InitRnode } NewNode end end
 4696 3442
a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 114.89989 10.05 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fd(Utilisation)27
b(mac)n(hines)e(IDRIS)5198 3359 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0 /N@T-0 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0 def /ArmB
28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 5198 3359 a 3836 4088
a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 53.76717 26.88358 2.5 }
false /N@T-0-0-0 16 {InitRnode } NewNode end end
 3836 4088 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 49.96716 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial
1 TeXcolorgray 3992 4037 a Fc(T3E)p Black 1 TeXcolorgray
3917 4137 a Fb(1/2/3)c(jours)p Black 4059 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0 /N@T-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 4059
4067 a 3405 4836 a
 tx@Dict begin tx@NodeDict begin {7.1988 5.92133 26.60347 13.30173
7.1988 } false /N@T-0-0-0-0 16 {InitRnode } NewNode end end
 3405 4836 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 20.68214 7.1988 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial Fb(In)o(tro.)3516 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0-0 /N@T-0-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 3516 4776 a 3650
4836 a
 tx@Dict begin tx@NodeDict begin {7.1988 5.92133 25.06879 12.5344 7.1988
} false /N@T-0-0-0-1 16 {InitRnode } NewNode end end
 3650 4836 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 19.14746 7.1988 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fb(PVM)3754 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0-1 /N@T-0-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 3754 4776 a 3882 4836 a
 tx@Dict begin tx@NodeDict begin {7.1988 5.92133 22.63817 11.31908
7.1988 } false /N@T-0-0-0-2 16 {InitRnode } NewNode end end
 3882 4836
a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 16.71684 7.1988 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fb(MPI)3976
4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0-2 /N@T-0-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 3976 4776 a 4093 4836 a
 tx@Dict begin tx@NodeDict begin {7.1988 6.89354 41.70096 20.85048
7.1988 } false /N@T-0-0-0-3 16 {InitRnode } NewNode end end
 4093 4836 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 4.77222
neg 35.77963 7.1988 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fb(Optimisat.)4266 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0-3 /N@T-0-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 4266
4776 a 4463 4878 a
 tx@Dict begin tx@NodeDict begin {12.3 9.42133 33.38144 16.69072 12.3
} false /N@T-0-0-0-4 16 {InitRnode } NewNode end end
 4463 4878 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.3
neg 27.46011 12.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial -36 x Fb(HPF-)4495 4892 y(CRAFT)4602 4776
y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-0-4 /N@T-0-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 4602 4776 a 5268 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 40.15584 20.07791 2.5 }
false /N@T-0-0-1 16 {InitRnode } NewNode end end
 5268 4088 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 36.35583 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray 5374 4037 a Fc(C90)p
Black 1 TeXcolorgray 5350 4137 a Fb(5)f(jours)p Black
5435 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1 /N@T-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 5435 4067 a 4764 4836 a
 tx@Dict begin tx@NodeDict begin {7.1988 5.92133 26.60347 13.30173
7.1988 } false /N@T-0-0-1-0 16 {InitRnode } NewNode end end
 4764 4836 a 31 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 20.68214 7.1988 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fb(In)o(tro.)4874
4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1-0 /N@T-0-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 4874 4776 a 5008 4836 a
 tx@Dict begin tx@NodeDict begin {7.1988 5.92133 24.93678 12.46838
7.1988 } false /N@T-0-0-1-1 16 {InitRnode } NewNode end end
 5008 4836 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 19.01546 7.1988 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fb(V)l(ect.)5112 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1-1 /N@T-0-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 5112
4776 a 5239 4878 a
 tx@Dict begin tx@NodeDict begin {12.3 9.42133 41.70097 20.85048 12.3
} false /N@T-0-0-1-2 16 {InitRnode } NewNode end end
 5239 4878 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.3
neg 35.77965 12.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end


@endspecial -36 x Fb(D)o(\023)-27 b(eb)q(ogage)5271
4892 y(Optimisat.)5412 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1-2 /N@T-0-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 5412 4776 a 5609 4836 a
 tx@Dict begin tx@NodeDict begin {7.27222 5.92133 30.00629 15.00314
7.27222 } false /N@T-0-0-1-3 16 {InitRnode } NewNode end end

5609 4836 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 24.08496 7.27222 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fb(A)o(telier)5733 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1-3 /N@T-0-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 5733 4776 a 5882 4836 a
 tx@Dict begin tx@NodeDict begin {7.27222 5.92133 27.58961 13.7948
7.27222 } false /N@T-0-0-1-4 16 {InitRnode } NewNode end end
 5882
4836 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 21.66829 7.27222 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fb(P)o(aral.)5996
4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-1-4 /N@T-0-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 5996 4776 a 6141 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 47.28929 23.64464 2.5 }
false /N@T-0-0-2 16 {InitRnode } NewNode end end
 6141 4088 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 43.48929 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray 6222 4037 a Fc(Grapp)r(e)p
Black 1 TeXcolorgray 6252 4137 a Fb(2)20 b(jours)p Black
6337 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-2 /N@T-0-0 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 6337 4067 a 6134 4878 a
 tx@Dict begin tx@NodeDict begin {12.3 9.42133 48.93018 24.46509 12.3
} false /N@T-0-0-2-0 16 {InitRnode } NewNode end end
 6134 4878 a 32 w
@beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 7.3
neg 43.00885 12.3 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial -36 x Fb(Util.)6166
4892 y(D)o(\023)-27 b(ev.)25 b(F)l(ortran)6337 4776 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-0-2-0 /N@T-0-0-2 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end

6337 4776 a 6769 3441 a
 tx@Dict begin tx@NodeDict begin {9.94998 7.67133 46.9037 23.45184
9.94998 } false /N@T-0-1 16 {InitRnode } NewNode end end
 6769 3441 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.55
neg 40.98238 9.94998 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fd(Langages)6963 3359 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1 /N@T-0 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0 def /ArmB
28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 6963
3359 a 6557 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 49.9435 24.97174 2.5 }
false /N@T-0-1-0 16 {InitRnode } NewNode end end
 6557 4088 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 46.1435 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end


@endspecial 1 TeXcolorgray 6639 4037 a Fc(F)-6 b(ort.)31
b(90)p Black 1 TeXcolorgray 6679 4137 a Fb(3)20 b(jours)p
Black 6765 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-0 /N@T-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 6765 4067 a 6996 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 40.15584 20.07791 2.5 }
false /N@T-0-1-1 16 {InitRnode } NewNode end end
 6996 4088 a
31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 36.35583 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray
7137 4037 a Fc(C)p Black 1 TeXcolorgray 7077 4137 a Fb(5)g(jours)p
Black 7162 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-1 /N@T-0-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 7162 4067 a 6996 4797 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 40.15584 20.07791 2.5 }
false /N@T-0-1-1-0 16 {InitRnode } NewNode end end
 6996 4797 a
31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 36.35583 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray
7082 4746 a Fc(C++)p Black 1 TeXcolorgray 7077 4846 a
Fb(2)g(jours)p Black 7162 4776 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-1-1-0 /N@T-0-1-1 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 7162 4776 a 7358 3442
a
 tx@Dict begin tx@NodeDict begin {10.05 7.67133 55.85365 27.92682 10.05
} false /N@T-0-2 16 {InitRnode } NewNode end end
 7358 3442 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.55
neg 49.93233 10.05 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial
Fd(Graphiques)7590 3359 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-2 /N@T-0 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0 def /ArmB
28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 7590 3359 a 7353 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 57.18944 28.59471 2.5 }
false /N@T-0-2-0 16 {InitRnode } NewNode end end
 7353
4088 a 31 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 53.38943 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1
TeXcolorgray 7434 4037 a Fc(5)k(mo)r(dules)p Black 1
TeXcolorgray 7457 4137 a Fb(1)c(\022)-28 b(a)19 b(3)h(jours)p
Black 7590 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-2-0 /N@T-0-2 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 7590 4067 a 7845 3436 a
 tx@Dict begin tx@NodeDict begin {9.35556 7.47688 66.4666 33.23329
9.35556 } false /N@T-0-3 16 {InitRnode } NewNode end end
 7845 3436 a
32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 5.35556
neg 60.54527 9.35556 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fc(Asp)r(ects)k(d'Unix)8121
3359 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-3 /N@T-0 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0 def /ArmB
28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 8121 3359 a 7876 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 59.0228 29.5114 2.5 } false
/N@T-0-3-0 16 {InitRnode } NewNode end end
 7876 4088 a 32 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 55.2228 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray 7958 4037 a Fc(Adm./S)n(\023)
-33 b(ec.)p Black 1 TeXcolorgray 8036 4137 a Fb(2)20
b(jours)p Black 8121 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-3-0 /N@T-0-3 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 8121 4067 a 8451 3442 a
 tx@Dict begin tx@NodeDict begin {10.05 5.92133 38.50238 19.25119 10.05
} false /N@T-0-4 16 {InitRnode } NewNode end end
 8451
3442 a 32 w @beginspecial @setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 3.8
neg 32.58105 10.05 .5 Frame  gsave 3.0 -45 PtoC Shadow .25  setgray
gsave fill grestore stroke grestore gsave 1  setgray gsave fill grestore
stroke grestore gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore
end
 
@endspecial Fd(Chimie)8611
3359 y
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-4 /N@T-0 InitNC { tx@Dict begin /Lineto /lineto load
def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0 def /ArmB
28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if end gsave
0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore end
 8611 3359 a 8390 4088 a
 tx@Dict begin tx@NodeDict begin {18.3 13.3 53.27966 26.63983 2.5 }
false /N@T-0-4-0 16 {InitRnode } NewNode end end
 8390 4088 a 31 w @beginspecial
@setspecial
 tx@Dict begin STP newpath 0.8 SLW 0  setgray  0. true 3.8 neg 13.3
neg 49.47966 18.3 .5 Frame  gsave 0  setgray fill grestore gsave 0.8
SLW 0  setgray 0 setlinecap stroke  grestore end
 
@endspecial 1 TeXcolorgray 8471 4037 a Fc(Gaussian)p
Black 1 TeXcolorgray 8526 4137 a Fb(2)g(jours)p Black
8611 4067 a
 tx@Dict begin gsave STV newpath 0.8 SLW 0  setgray  /ArrowA { moveto
} def /ArrowB { } def /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0
0.0 0 0 /N@T-0-4-0 /N@T-0-4 InitNC { tx@Dict begin /Lineto /lineto
load def false pop end /AngleA 90. def /AngleB -90. def /ArmA 10.0
def /ArmB 28.45274 def /ArmTypeA 0 def /ArmTypeB 0 def NCAngle  } if
end gsave 0.8 SLW 0  setgray 0 setlinecap stroke  grestore  grestore
end
 8611 4067 a Black 5191 5206 a Fa(Figure)27
b(1:)37 b(Organisation)25 b(des)i(cours)p Black Black
Black Black 8269 5413 a
 currentpoint grestore moveto
 8269 5413 a Black Black eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
